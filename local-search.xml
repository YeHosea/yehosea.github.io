<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>stl-vector</title>
    <link href="/2021/05/10/stl-vector/"/>
    <url>/2021/05/10/stl-vector/</url>
    
    <content type="html"><![CDATA[<h3 id="常考"><a class="markdownIt-Anchor" href="#常考"></a> 常考</h3><h4 id="vector的底层实现"><a class="markdownIt-Anchor" href="#vector的底层实现"></a> vector的底层实现</h4><h4 id="push_back复杂度-代码实现"><a class="markdownIt-Anchor" href="#push_back复杂度-代码实现"></a> push_back复杂度 代码实现</h4><details><summary>Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-keyword">void</span> <span class="hljs-built_in">vector</span>&lt;T&gt;::push_back(<span class="hljs-keyword">const</span> value_type&amp; value)<br>&#123;<br>    <span class="hljs-keyword">if</span> (end_ != cap_)<br>    &#123;<br>        construct(address_of(*end_), value);<br>        ++end_;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        reallocate_insert(end_, value);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-keyword">void</span> <span class="hljs-built_in">vector</span>&lt;T&gt;::reallocate_insert(iterator pos, <span class="hljs-keyword">const</span> value_type&amp; value)<br>&#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> new_size = get_new_cap(<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">auto</span> new_begin = data_allocator::allocate(new_size);<br>  <span class="hljs-keyword">auto</span> new_end = new_begin;<br>  <span class="hljs-keyword">const</span> value_type&amp; value_copy = value;<br>  <span class="hljs-keyword">try</span><br>  &#123;<br>    new_end = mystl::uninitialized_move(begin_, pos, new_begin);<br>    data_allocator::construct(mystl::address_of(*new_end), value_copy);<br>    ++new_end;<br>    new_end = mystl::uninitialized_move(pos, end_, new_end);<br>  &#125;<br>  <span class="hljs-keyword">catch</span> (...)<br>  &#123;<br>    data_allocator::deallocate(new_begin, new_size);<br>    <span class="hljs-keyword">throw</span>;<br>  &#125;<br>  destroy_and_recover(begin_, end_, cap_ - begin_);<br>  begin_ = new_begin;<br>  end_ = new_end;<br>  cap_ = new_begin + new_size;<br>&#125;<br></code></pre></td></tr></table></figure></details><h4 id="push_back使用的是指针-引用还是拷贝"><a class="markdownIt-Anchor" href="#push_back使用的是指针-引用还是拷贝"></a> push_back使用的是指针、引用还是拷贝</h4><h4 id="vector和list的区别-查找效率谁快"><a class="markdownIt-Anchor" href="#vector和list的区别-查找效率谁快"></a> vector和list的区别 查找效率谁快</h4><h4 id="c语言实现vector"><a class="markdownIt-Anchor" href="#c语言实现vector"></a> c语言实现vector</h4><h4 id="vector内存管理"><a class="markdownIt-Anchor" href="#vector内存管理"></a> vector内存管理</h4><details><summary>Code</summary>为了避免每一次插入都要扩容，vector在初始化时会让容量大于预装入的数据长。<p>当插入数据的时候，如果此时容量已满，那么就实现扩容（扩容并不是在原vector的基础上，而是新建一个大小是旧容量的150%的新vector，然后再将旧vector的值拷贝到新vector，再将插入的值拷贝进vector。然后调用析构函数释放旧vector的内存）。</p></details><h4 id="vector增加元素时内存变化情况"><a class="markdownIt-Anchor" href="#vector增加元素时内存变化情况"></a> vector增加元素时，内存变化情况</h4><h4 id="vector的容量过小后是如何实现扩增容量的"><a class="markdownIt-Anchor" href="#vector的容量过小后是如何实现扩增容量的"></a> vector的容量过小后，是如何实现扩增容量的？</h4><details><summary>Code</summary>先按照一定的增长方式增加容量大小，重新分配一个符合该大小的vector，再将原本vector的数组拷贝进新的vector，再插入新的值。因为每一次重新分配vector和拷贝十分耗时，所以vector并不会在每次增加新数据时都重新分配，那么这就意味着我们需要定义一个比我们预期存储范围还大出一部分（这一部分用于可能的范围增长）的vector，这样就可以避免每次重新分配vector。</details><h4 id="如果删除vector中间元素-怎么实现不能用erease无序"><a class="markdownIt-Anchor" href="#如果删除vector中间元素-怎么实现不能用erease无序"></a> 如果删除vector中间元素 怎么实现（不能用erease，无序）</h4><details><summary>Code</summary>对顺序无要求<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span>; i &lt; vec.size(); ++i)<br>&#123;<br>    <span class="hljs-keyword">if</span>(...)　　　　　　　　　　　　　　<span class="hljs-comment">// 删除条件</span><br>    &#123;<br>        vec[i] = vec.back();　　　　<span class="hljs-comment">// vec[i]表示要删除的元素</span><br>        vec.pop_back();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></details><h4 id="定义了两个vectorvector里面存的是类是否可以直接使用memcpy去复制vector"><a class="markdownIt-Anchor" href="#定义了两个vectorvector里面存的是类是否可以直接使用memcpy去复制vector"></a> 定义了两个vector，vector里面存的是类，是否可以直接使用memcpy去复制vector</h4><details><summary>Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;data(<span class="hljs-number">1024</span>);<span class="hljs-comment">//这里要预分配vector大小</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)buf[i]=i;<br><span class="hljs-built_in">memcpy</span>((<span class="hljs-keyword">int</span>*)&amp;data[<span class="hljs-number">0</span>], buf, data.size());<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)<span class="hljs-built_in">cout</span>&lt;&lt;data[i]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br></code></pre></td></tr></table></figure></details><h4 id="vector的扩张因子是几倍扩容"><a class="markdownIt-Anchor" href="#vector的扩张因子是几倍扩容"></a> vector的扩张因子(是几倍扩容)</h4><details><summary>Code</summary>1.5或2使用k=2增长因子的问题在于，每次扩展的新尺寸必然刚好大于之前分配的总和<p>之前被分配的空间不能利用对缓存并不友好，最好把增长因子设为1&lt;k&lt;2，例如 Folly 采用 1.5，RapidJSON 也是跟随采用 1.5，k=1.5时，可以在几次扩容之后，重用之前的内存。</p></details><h4 id="设计一个数据结构可以满足存取数有序又要结合list跟vector的优点"><a class="markdownIt-Anchor" href="#设计一个数据结构可以满足存取数有序又要结合list跟vector的优点"></a> 设计一个数据结构：可以满足存取数有序，又要结合list跟vector的优点</h4><details><summary>Code</summary>list+hashmap</details><h4 id="vector迭代器失效的情况"><a class="markdownIt-Anchor" href="#vector迭代器失效的情况"></a> vector迭代器失效的情况</h4><details><summary>Code</summary><ol><li><p>当插入（push_back）一个元素后，end操作返回的迭代器肯定失效。</p><p>vector在push_back的时候当容量不足时会触发扩容，导致整个vector重新申请内存，并且将原有的数据复制到新的内存中，并将原有内存释放，这自然是会导致迭代器失效的，因为迭代器所指的内存都已经被释放。</p></li><li><p>当插入(push_back)一个元素后，capacity返回值与没有插入元素之前相比有改变，则需要重新加载整个容器，此时first和end操 作返回的迭代器都会失效。</p></li><li><p>当进行删除操作（erase，pop_back）后，指向删除点的迭代器全部失效；指向删除点后面的元素的迭代器也将全部失效。</p></li></ol></details><h4 id="vector用迭代器删除后迭代器会不会失效"><a class="markdownIt-Anchor" href="#vector用迭代器删除后迭代器会不会失效"></a> vector用迭代器删除后迭代器会不会失效</h4><p>同上</p><details><summary>Code</summary>vector::erase()的实质是将迭代器后面的元素全部复制一遍，往前移动一个位置，因此a.erase(iter)删除后当前位置即为原iter的后一位，所以需要将删除后返回的位置赋给iter，避免iter直接++成为野指针</details><h4 id="vector的emplace_back为什么比push_back高效"><a class="markdownIt-Anchor" href="#vector的emplace_back为什么比push_back高效"></a> vector的emplace_back为什么比push_back高效？</h4><details><summary>Code</summary><p>push_back(A(“cc”)) 此时它创建一个临时局部A类对象。而emplace_back(“cc”)可以在内存中直接创建对象而不需要传入对象。</p><p>总的来说，再插入值的时候，push_back会拷贝元素，emplace_back会构造元素。但是当插入的是对象的时候，emplace_back的形参里的参数应该与对象的构造函数相对应</p><p>emplace_back函数原型：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;class... Args&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">emplace_back</span> <span class="hljs-params">(Args&amp;&amp;... args)</span></span>;<br></code></pre></td></tr></table></figure><p>在容器尾部添加一个元素，这个元素原地构造，不需要触发拷贝构造和转移构造。而且调用形式更加简洁，直接根据参数初始化临时对象的成员。</p></details><h4 id="描述map和vector的不同"><a class="markdownIt-Anchor" href="#描述map和vector的不同"></a> 描述map和vector的不同。</h4><details><summary>Code</summary><p>两类容器的根本差别在于，顺序容器中的元素是“顺序”存储的（链表容器中的元素虽然不是在内存中“连续”存储的，但仍然是按“顺序”存储的）。理解“顺序”的关键，是理解容器支持的操作形式以及效率。</p><p>对于vector这样的顺序容器，元素在其中按顺序存储，每个元素有唯一对应的位置编号，所有操作都是按编号（位置）进行的。例如，获取元素（头、尾、用下标获取任意位置）、插入删除元素（头、尾、任意位置）、遍历元素（按元素位置顺序逐一访问）。底层的数据结构是数组、链表，简单但已能保证上述操作的高效。</p><p>而对于依赖值的元素访问，例如查找（搜索）给定值（find)，在这种数据结构上的实现是要通过遍历完成的，效率不佳。</p><p>而map这种关联容器，就是为了高效实现“按值访问元素”这类操作而设计的。为了达到这一目的，容器中的元素是按关键字值存储的，关键字值与元素数据建立起对应关系，这就是“关联”的含义。底层数据结构是红黑树、哈希表等，可高效实现按关键字值查找、添加、删除元素等操作。</p></details><h4 id="编程"><a class="markdownIt-Anchor" href="#编程"></a> 编程</h4><p>（1）编写函数，返回一个动态分配的int的vector。将此vector传递给另一个函数，这个函数读取标准输入，将读入的值保存在 vector 元素中。再将vector传递给另一个函数，打印读入的值。记得在恰当的时刻delete vector。<br />（2）重做第（1）题，这次使用 shared_ptr而不是内置指针。<br />待补充</p><h4 id="如何从一个list初始化一个vector-从一个vector又该如何创建编写代码验证你的答案"><a class="markdownIt-Anchor" href="#如何从一个list初始化一个vector-从一个vector又该如何创建编写代码验证你的答案"></a> 如何从一个list初始化一个vector? 从一个vector又该如何创建?编写代码验证你的答案。</h4><details><summary>Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt; ilist = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; ivec = &#123;<span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>&#125;;<br><span class="hljs-comment">// 容器类型不同，不能使用拷贝初始化</span><br><span class="hljs-comment">// vector&lt;double&gt; ivec (ilist);</span><br><span class="hljs-comment">// 元素类型相容，因此可采用范围初始化</span><br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">double</span>&gt; <span class="hljs-title">dvec</span> <span class="hljs-params">(ilist.begin(),ilist.end())</span></span>;<br><span class="hljs-comment">// 容器类型不同，不能使用拷贝初始化</span><br><span class="hljs-comment">// vector&lt;double&gt; dvec1 (ivec);</span><br><span class="hljs-comment">// 元素类型相容，因此可采用范围初始化</span><br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">double</span>&gt; <span class="hljs-title">dvec1</span> <span class="hljs-params">(ivec.begin(),ivec.end())</span></span>;<br></code></pre></td></tr></table></figure></details><h4 id="对6种创建和初始化vector对象的方法每一种都给出一个实例-解释每个vector包含什么值"><a class="markdownIt-Anchor" href="#对6种创建和初始化vector对象的方法每一种都给出一个实例-解释每个vector包含什么值"></a> 对6种创建和初始化vector对象的方法，每一种都给出一个实例。解释每个vector包含什么值。</h4><details><summary>Code</summary><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">1.</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; ilist1;     <span class="hljs-comment">//默认初始化，vector 为空— —size返回0，表明容器中尚未有元素；capacity返回0，意味着尚未分配存储空间。这种初始化方式适合于元素个数和值未知，需要在程序运行中动态添加的情况。</span><br>2. vector&lt;int&gt; ilist2 (ilist)；//ilist2初始化为ilist的拷贝，ilist必须与ilist2类型相同，即也是int的vector类型，ilist2将具有与ilist相同的容量和元素。<br>   <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; ilist2_1=ilist；<span class="hljs-comment">//等价方式</span><br><span class="hljs-number">3.</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; ilist = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3.0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;;      <span class="hljs-comment">//ilist</span><br>初始化为列表中元素的拷贝，列表中的元素类型必须与ilist的元素类型相容，在本例中必须是与整型相容的数值类型。对于整型，会直接拷贝其值，对于其他类型则需进行类型转换（如<span class="hljs-number">3.0</span>转换为<span class="hljs-number">3</span>）。这种初始化方式适合元素数量和值预先可知的情况。<br>   <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; ilist_1 &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3.0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span> ｝;      <span class="hljs-comment">//等价方式</span><br><span class="hljs-number">4.</span> <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">ilist3</span> <span class="hljs-params">(ilist.begin()+<span class="hljs-number">2</span>, ilist.end ()<span class="hljs-number">-1</span>)</span></span>;<br><span class="hljs-comment">//ilist3初始化为两个迭代器指定范围中的元素的拷贝，范围中的元素类型必须与ilist3的元素类型相容，在本例中ilist3被初始化为（3，4，5，6 &#125;。注意，由于只要求范围中元素类型与待初始化的容器的元素类型相容，因此，迭代器来自于不同类型的容器是可能的，例如，用一个double的list的范围来初始化ilist3是可行的。另外，由于构造函数只是读取范围中的元素并进行拷贝，因此使用普通迭代器还是const迭代器来指出范围并无区别。这种初始化方法特别适合于获取一个序列的子序列。</span><br>5. vector&lt;int&gt; ilist4 (7)；//默认值初始化，ilist4中将包含7个元素，每个元素进行缺省的值初始化，对于int，也就是被赋值为0，因此ilist4被初始化为包含7个0。当程序运行初期元素大致数量可预知，而元素的值需动态获取时，可采用这种初始化方式。<br>6. vector&lt;int&gt; ilist5 (7, 3)；//指定值初始化，ilist5被初始化为包含7个值为3的int。<br></code></pre></td></tr></table></figure></details><h4 id="vector为什么是线程安全的"><a class="markdownIt-Anchor" href="#vector为什么是线程安全的"></a> vector为什么是线程安全的</h4><p>?不是线程安全的吧…原因如下题</p><h4 id="在多线程时对vector写时可能会出现什么错误"><a class="markdownIt-Anchor" href="#在多线程时对vector写时可能会出现什么错误"></a> 在多线程时，对vector写时可能会出现什么错误？</h4><details><summary>Code</summary>程序崩溃，因为线程A vector进行写时，如果内存已满会重新申请内存，此时它的地址已经改变，而线程B依旧在写入/读入已经无效的地址，就会造成崩溃。有两种解决办法：<ol><li><p>暴力解决法：直接给vector定义一个较大的内存，避免重新申请</p></li><li><p>加同步锁，每次写入前都锁住，执行完本次写入操作后，其他线程才能再次写入或读入。</p></li></ol><p>所以对容器的modify操作应该是原子性的（一旦操作开始，到结束之前都不会切换到其他线程）</p></details>]]></content>
    
    
    <categories>
      
      <category>STL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>stl</tag>
      
      <tag>vector</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译原理求FIRST集、FOLLOW集和SELECT集</title>
    <link href="/2021/05/01/compilation-principle-1/"/>
    <url>/2021/05/01/compilation-principle-1/</url>
    
    <content type="html"><![CDATA[<h3 id="first集"><a class="markdownIt-Anchor" href="#first集"></a> First集</h3><p>First集合是求一个文法符号串所可能推导出的符号串的第一个终结符的集合。</p><p>First(X)就是求X所有推导出的符号串的第一个符号的集合。</p><p>求First集合可分如下几种情况:</p><ol><li><p>单个符号的First集合：单个终结符的First集合就是它自己。</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>I</mi><mi>R</mi><mi>S</mi><mi>T</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">FIRST(X)={X}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span></span></p></li><li><p>单个非终结符的First集合：</p></li></ol><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>−</mo><mo>&gt;</mo><mi>a</mi><mo>…</mo></mrow><annotation encoding="application/x-tex">A-&gt;a…</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">A</span><span class="mord">−</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span></span></span></span>产生式右部以<strong>终结符</strong>开头, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>属于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>i</mi><mi>r</mi><mi>s</mi><mi>t</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">First(A)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span></span></span></span>。</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>−</mo><mo>&gt;</mo><mi>B</mi><mo>…</mo></mrow><annotation encoding="application/x-tex">A-&gt;B…</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">A</span><span class="mord">−</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span></span></span></span>产生式右部以<strong>非终结符</strong>开头.根据定义,既然可以把<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span>替换成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mo>…</mo><mo>…</mo></mrow><annotation encoding="application/x-tex">B……</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span></span></span></span>,也可以看出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>i</mi><mi>r</mi><mi>s</mi><mi>t</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">First(B)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mclose">)</span></span></span></span>属于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>i</mi><mi>r</mi><mi>s</mi><mi>t</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">First(A)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span></span></span></span>。这是一个递归的推导。</p><p>举例：</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo>−</mo><mo>&gt;</mo><mo stretchy="false">(</mo><mi>E</mi><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi><mi>i</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">F -&gt; (E) | id</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord">−</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mclose">)</span><span class="mord">∣</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span></span></span></span>, 可以推出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>i</mi><mi>r</mi><mi>s</mi><mi>t</mi><mo stretchy="false">(</mo><mi>F</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo stretchy="false">(</mo><mo separator="true">,</mo><mi>i</mi><mi>d</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">}</mo></mrow></mrow><annotation encoding="application/x-tex">First(F)=\left\{\begin{matrix}(,id\end{matrix}\right\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">}</span></span></span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo>−</mo><mo>&gt;</mo><mi>F</mi><msup><mi>T</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">T -&gt; FT&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord">−</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span> , 可以推出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>i</mi><mi>r</mi><mi>s</mi><mi>t</mi><mo stretchy="false">(</mo><mi>T</mi><mo stretchy="false">)</mo><mo>=</mo><mi>F</mi><mi>i</mi><mi>r</mi><mi>s</mi><mi>t</mi><mo stretchy="false">(</mo><mi>F</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo stretchy="false">(</mo><mo separator="true">,</mo><mi>i</mi><mi>d</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">}</mo></mrow></mrow><annotation encoding="application/x-tex">First(T)=First(F)=\left\{\begin{matrix}(,id\end{matrix}\right\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">}</span></span></span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>T</mi><mo mathvariant="normal">′</mo></msup><mo>−</mo><mo>&gt;</mo><mo>∗</mo><mi>F</mi><msup><mi>T</mi><mo mathvariant="normal">′</mo></msup><mi mathvariant="normal">∣</mi><mi>ε</mi></mrow><annotation encoding="application/x-tex">T&#x27;-&gt; *FT&#x27; | ε</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.835222em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord">−</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord">∗</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathdefault">ε</span></span></span></span> , 可以推出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>i</mi><mi>r</mi><mi>s</mi><mi>t</mi><mo stretchy="false">(</mo><msup><mi>T</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>∗</mo><mo separator="true">,</mo><mi>ε</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">}</mo></mrow></mrow><annotation encoding="application/x-tex">First(T&#x27;)=\left\{\begin{matrix}* , ε\end{matrix}\right\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∗</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ε</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">}</span></span></span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>E</mi><mo mathvariant="normal">′</mo></msup><mo>−</mo><mo>&gt;</mo><mo>+</mo><mi>T</mi><msup><mi>E</mi><mo mathvariant="normal">′</mo></msup><mi mathvariant="normal">∣</mi><mi>ε</mi></mrow><annotation encoding="application/x-tex">E&#x27;-&gt; +TE&#x27; | ε</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.835222em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord">−</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord">+</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathdefault">ε</span></span></span></span>, 可以推出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>i</mi><mi>r</mi><mi>s</mi><mi>t</mi><mo stretchy="false">(</mo><msup><mi>E</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>+</mo><mo separator="true">,</mo><mi>ε</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">}</mo></mrow></mrow><annotation encoding="application/x-tex">First(E&#x27;)=\left\{\begin{matrix} + , ε\end{matrix}\right\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">+</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ε</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">}</span></span></span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>−</mo><mo>&gt;</mo><mi>T</mi><msup><mi>E</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">E -&gt; TE&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord">−</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>, 可以推出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>i</mi><mi>r</mi><mi>s</mi><mi>t</mi><mo stretchy="false">(</mo><mi>E</mi><mo stretchy="false">)</mo><mo>=</mo><mi>F</mi><mi>i</mi><mi>r</mi><mi>s</mi><mi>t</mi><mo stretchy="false">(</mo><mi>T</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo stretchy="false">(</mo><mo separator="true">,</mo><mi>i</mi><mi>d</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">}</mo></mrow></mrow><annotation encoding="application/x-tex">First(E)=First(T)=\left\{\begin{matrix}(,id\end{matrix}\right\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">}</span></span></span></span></span></span></p><h3 id="follow集"><a class="markdownIt-Anchor" href="#follow集"></a> Follow集</h3><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>o</mi><mi>l</mi><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Follow(A)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span></span></span></span>指的是在某些句型中紧跟在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span>右边的终结符号的集合</p><p>将右端结束标记 $ 放到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>O</mi><mi>L</mi><mi>L</mi><mi>O</mi><mi>W</mi><mo stretchy="false">(</mo><mi>S</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">FOLLOW(S)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">L</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mclose">)</span></span></span></span>中</p><p>按照下面两个规则不断迭代, 直到所有的FOLLOW集合都不再增长为止</p><p>如果存在产生式<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>−</mo><mo>&gt;</mo><mi>α</mi><mi>B</mi><mi>β</mi></mrow><annotation encoding="application/x-tex">A -&gt; αBβ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">A</span><span class="mord">−</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span> , 那么 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>I</mi><mi>R</mi><mi>S</mi><mi>T</mi><mo stretchy="false">(</mo><mi>β</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">FIRST(β)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose">)</span></span></span></span>中所有非 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ε</mi></mrow><annotation encoding="application/x-tex">ε</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ε</span></span></span></span> 的符号都在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>O</mi><mi>L</mi><mi>L</mi><mi>O</mi><mi>W</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">FOLLOW(B)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">L</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mclose">)</span></span></span></span>中；</p><p>如果存在产生式<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>−</mo><mo>&gt;</mo><mi>α</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">A -&gt; αB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">A</span><span class="mord">−</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span>, 或者<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>−</mo><mo>&gt;</mo><mi>α</mi><mi>B</mi><mi>β</mi></mrow><annotation encoding="application/x-tex">A -&gt; αBβ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">A</span><span class="mord">−</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span> 且<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>I</mi><mi>R</mi><mi>S</mi><mi>T</mi><mo stretchy="false">(</mo><mi>β</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">FIRST(β)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mclose">)</span></span></span></span>包含 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ε</mi></mrow><annotation encoding="application/x-tex">ε</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ε</span></span></span></span> , 那么<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>O</mi><mi>L</mi><mi>L</mi><mi>O</mi><mi>W</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">FOLLOW(A)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">L</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span></span></span></span>中的所有符号都加入到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>O</mi><mi>L</mi><mi>L</mi><mi>O</mi><mi>W</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">FOLLOW(B)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">L</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mclose">)</span></span></span></span>中</p><p>举例：</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi mathvariant="normal">–</mi><mo>&gt;</mo><mo>…</mo><mi>U</mi><mi>a</mi><mo>…</mo></mrow><annotation encoding="application/x-tex">A–&gt;…Ua…</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">A</span><span class="mord" style="margin-right:0.02778em;">–</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span></span></span></span> 要求的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>o</mi><mi>l</mi><mi>l</mi><mi>o</mi><mi>w</mi></mrow><annotation encoding="application/x-tex">Follow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span>集合的<strong>非终结符</strong>后跟<strong>终结符</strong></li></ul><p>根据定义，显然<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>属于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>o</mi><mi>l</mi><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">(</mo><mi>U</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Follow(U)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mclose">)</span></span></span></span>。这种情况下，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>o</mi><mi>l</mi><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">(</mo><mi>U</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Follow(U)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mclose">)</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span>没有任何关系，产生式左边是什么无所谓。</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi mathvariant="normal">–</mi><mo>&gt;</mo><mo>…</mo><mi>U</mi><mi>P</mi><mo>…</mo></mrow><annotation encoding="application/x-tex">A–&gt;…UP…</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">A</span><span class="mord" style="margin-right:0.02778em;">–</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span></span></span></span> 要求的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>o</mi><mi>l</mi><mi>l</mi><mi>o</mi><mi>w</mi></mrow><annotation encoding="application/x-tex">Follow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span>集合的<strong>非终结符</strong>后跟<strong>非终结符</strong></li></ul><p>根据定义，显然P的第一个符号属于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>o</mi><mi>l</mi><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">(</mo><mi>U</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Follow(U)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mclose">)</span></span></span></span>，也就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>i</mi><mi>r</mi><mi>s</mi><mi>t</mi><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">First(P)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mclose">)</span></span></span></span>属于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>o</mi><mi>l</mi><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">(</mo><mi>U</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Follow(U)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mclose">)</span></span></span></span>。</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi mathvariant="normal">–</mi><mo>&gt;</mo><mo>…</mo><mi>U</mi><mi>P</mi></mrow><annotation encoding="application/x-tex">A–&gt;…UP</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">A</span><span class="mord" style="margin-right:0.02778em;">–</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span>并且<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ε</mi></mrow><annotation encoding="application/x-tex">ε</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ε</span></span></span></span>属于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>i</mi><mi>r</mi><mi>s</mi><mi>t</mi><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">First(P)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mclose">)</span></span></span></span><br />要求的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>o</mi><mi>l</mi><mi>l</mi><mi>o</mi><mi>w</mi></mrow><annotation encoding="application/x-tex">Follow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span>集合的<strong>非终结符</strong>后跟非结尾的终结符， 并且结尾非终结符的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>i</mi><mi>r</mi><mi>s</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">First</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span></span></span></span>集合<strong>包含空串</strong>。</li></ul><p>这是上一种情况的一种特例，除了要按上一种情况处理，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>i</mi><mi>r</mi><mi>s</mi><mi>t</mi><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">First(P)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mclose">)</span></span></span></span>属于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>o</mi><mi>l</mi><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">(</mo><mi>U</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Follow(U)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mclose">)</span></span></span></span> 以外还要进行分析；因为当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span>推导为空串时，空串不能出现在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>o</mi><mi>l</mi><mi>l</mi><mi>o</mi><mi>w</mi></mrow><annotation encoding="application/x-tex">Follow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span>集合中，所以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span></span></span></span> 后面跟随的应该是P后面的东西，可<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span>已经是结束的符号，此时<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span></span></span></span>后面显然就是A后面跟随的东西了。所以在这种情况下<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>o</mi><mi>l</mi><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Follow(A)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span></span></span></span>也属于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>o</mi><mi>l</mi><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">(</mo><mi>U</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Follow(U)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mclose">)</span></span></span></span>。</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi mathvariant="normal">–</mi><mo>&gt;</mo><mo>…</mo><mi>U</mi></mrow><annotation encoding="application/x-tex">A–&gt;…U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">A</span><span class="mord" style="margin-right:0.02778em;">–</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span></span></span></span> 要求的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>o</mi><mi>l</mi><mi>l</mi><mi>o</mi><mi>w</mi></mrow><annotation encoding="application/x-tex">Follow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span>集合的<strong>非终结符</strong>在产生式结尾</li></ul><p>这时候又要递归推导，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span></span></span></span>是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span>的结尾，所以U后面跟随的东西也就是A后面跟随的东西。所以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>o</mi><mi>l</mi><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">(</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">Follow(A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mord mathdefault">A</span></span></span></span>)属于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>o</mi><mi>l</mi><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">(</mo><mi>U</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Follow(U)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mclose">)</span></span></span></span>。</p><p>注意：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>o</mi><mi>l</mi><mi>l</mi><mi>o</mi><mi>w</mi></mrow><annotation encoding="application/x-tex">Follow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span>集合中的符号一定是终结符，并且不能包括空串<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ε</mi></mrow><annotation encoding="application/x-tex">ε</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ε</span></span></span></span>，而且定义开始符号的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>o</mi><mi>l</mi><mi>l</mi><mi>o</mi><mi>w</mi></mrow><annotation encoding="application/x-tex">Follow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span>集合初始为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">{</mo><mi mathvariant="normal">#</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{\#\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">#</span><span class="mclose">}</span></span></span></span>。</p><h3 id="select集"><a class="markdownIt-Anchor" href="#select集"></a> Select集</h3><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>e</mi><mi>l</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">Select</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span></span></span></span>集合就是产生式左部的可能的推导结果的起始符号。</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>e</mi><mi>l</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo stretchy="false">(</mo><mi>A</mi><mi mathvariant="normal">–</mi><mo>&gt;</mo><mi>B</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Select(A–&gt;B)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord" style="margin-right:0.02778em;">–</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mclose">)</span></span></span></span>就是求这个产生式中A可能推导出起始符号集合(不包含空串<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ε</mi></mrow><annotation encoding="application/x-tex">ε</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ε</span></span></span></span>)。</p><p>求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>e</mi><mi>l</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">Select</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span></span></span></span>集合可分如下几种情况:</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi mathvariant="normal">–</mi><mo>&gt;</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">A–&gt;X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">A</span><span class="mord" style="margin-right:0.02778em;">–</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span> (X为任意文法符号串，不限于非终结符或单个符号)，并且X不能推导出空串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ε</mi></mrow><annotation encoding="application/x-tex">ε</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ε</span></span></span></span></li></ul><p>根据定义，显然<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span>推出的符号串起始就是X的起始，也就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>i</mi><mi>r</mi><mi>s</mi><mi>t</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">First(X)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span></span></span>.</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>e</mi><mi>l</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo stretchy="false">(</mo><mi>A</mi><mi mathvariant="normal">–</mi><mo>&gt;</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mi>F</mi><mi>i</mi><mi>r</mi><mi>s</mi><mi>t</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Select(A–&gt;X)= First(X)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord" style="margin-right:0.02778em;">–</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span></span></span></li></ul><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi mathvariant="normal">–</mi><mo>&gt;</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">A–&gt;X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">A</span><span class="mord" style="margin-right:0.02778em;">–</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span> (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span>为任意文法符号串，不限于非终结符或单个符号)，并且X能推导出空串<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ε</mi></mrow><annotation encoding="application/x-tex">ε</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ε</span></span></span></span></p><p>根据定义，显然<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>i</mi><mi>r</mi><mi>s</mi><mi>t</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">First(X)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span></span></span>属于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>e</mi><mi>l</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo stretchy="false">(</mo><mi>A</mi><mi mathvariant="normal">–</mi><mo>&gt;</mo><mi>X</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Select(A–&gt;X)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord" style="margin-right:0.02778em;">–</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span></span></span>，此外，当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span>推导为空串时，显然<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span>也推导为空串，那么此时推导出的符号串就会是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span>后面的符号的推导结果。也就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>o</mi><mi>l</mi><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Follow(A)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span></span></span></span>,所以，此时<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>o</mi><mi>l</mi><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Follow(A)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mclose">)</span></span></span></span>也属于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>e</mi><mi>l</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo stretchy="false">(</mo><mi>A</mi><mi mathvariant="normal">–</mi><mo>&gt;</mo><mi>X</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Select(A–&gt;X)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mord" style="margin-right:0.02778em;">–</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span></span></span>。</p><p>注意：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>e</mi><mi>l</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">Select</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span></span></span></span>集合中不包括空串<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ε</mi></mrow><annotation encoding="application/x-tex">ε</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ε</span></span></span></span>，但有可能会包含#(句子括号)。</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>编译原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译原理答案</title>
    <link href="/2021/05/01/compilation-principle/"/>
    <url>/2021/05/01/compilation-principle/</url>
    
    <content type="html"><![CDATA[<h3 id="first集"><a class="markdownIt-Anchor" href="#first集"></a> FIRST集</h3><h3 id="超星第一章小节与测验"><a class="markdownIt-Anchor" href="#超星第一章小节与测验"></a> 超星第一章小节与测验</h3><p><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/JKM_2%25SS%5D314E%25T9I%7DOH9BW.png" alt="" /></p><h3 id="超星第二章小节与测验"><a class="markdownIt-Anchor" href="#超星第二章小节与测验"></a> 超星第二章小节与测验</h3><p>sorry 图床数据丢失</p><h3 id="超星-语法分析自顶向下方法作业"><a class="markdownIt-Anchor" href="#超星-语法分析自顶向下方法作业"></a> 超星 语法分析：自顶向下方法作业</h3><p><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/IMG_2098.PNG" alt="" /><br /><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/IMG_2099.PNG" alt="" /><br /><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/IMG_2100.PNG" alt="" /><br /><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/IMG_2101.PNG" alt="" /><br /><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/IMG_2102.PNG" alt="" /></p>]]></content>
    
    
    <categories>
      
      <category>答案</category>
      
    </categories>
    
    
    <tags>
      
      <tag>answer</tag>
      
      <tag>编译原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法分析与设计答案</title>
    <link href="/2021/04/22/algorithms-analysis-and-design/"/>
    <url>/2021/04/22/algorithms-analysis-and-design/</url>
    
    <content type="html"><![CDATA[<h3 id="第一次作业"><a class="markdownIt-Anchor" href="#第一次作业"></a> 第一次作业</h3><p>问题1：为最近对问题的一维版本设计一个直接基于分治技术的算法,并确定它的时间复杂度。假设输入的点是以升序保存在数组A中。（最近点对问题定义：已知上m个点的集合，找出对接近的一对点。）</p><p>输入：保存升序点序列的数组A</p><p>输出：最近的一对数的距离</p><p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Close</span><span class="hljs-params">(<span class="hljs-keyword">int</span> A[a...b])</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a==b)<span class="hljs-keyword">return</span> error;<span class="hljs-comment">//如果当前处理范围内只有一个点，返回error</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b-a==<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> A[b]-A[a];<span class="hljs-comment">//如果当前范围内只有两个点，直接返回这两个点的距离</span><br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">int</span> c=<span class="hljs-keyword">int</span>((a+b)/<span class="hljs-number">2</span>);<span class="hljs-comment">//找到当前处理范围内的中点</span><br>        <span class="hljs-keyword">return</span> min&#123;Close(A[a...c]),Close(A[c...b]),A[c+<span class="hljs-number">1</span>]-A[c]&#125;; <span class="hljs-comment">//分成两个范围的子问题,并处理之间的情况</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>问题2：设计一个分治算法来计算二叉树的层数.(空树返回0,单顶点树返回1),并确定它的时间复杂度.</p><p>输入：二叉树T</p><p>输出：二叉树的层数</p><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">height</span><span class="hljs-params">(Tree T)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(T=<span class="hljs-literal">NULL</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> max&#123;height(left_T),height(right_T)&#125;+<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>答案</category>
      
    </categories>
    
    
    <tags>
      
      <tag>answer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>folly库 FBstring</title>
    <link href="/2021/03/20/folly-fbstring/"/>
    <url>/2021/03/20/folly-fbstring/</url>
    
    <content type="html"><![CDATA[<p><strong>高性能std::string替代品FBstring</strong></p><a id="more"></a><h3 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h3><p>c++中string常见的三种实现方式</p><a class="btn" href="https://zhuanlan.zhihu.com/p/348614098"  target="_blank">转载链接</a><ol><li><p><strong>eager copy</strong></p><p>每次拷贝时将原 string 对应的内存以及所持有的动态资源完整地复制一份，即没有任何特殊处理。</p> <details> <summary>三指针结构</summary> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">string</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span> :<br>    <span class="hljs-function"><span class="hljs-keyword">const</span> _pointer <span class="hljs-title">data</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>&#123;    <span class="hljs-keyword">return</span> start;     &#125;<br>    <span class="hljs-function">iterator <span class="hljs-title">begin</span><span class="hljs-params">()</span></span>&#123;     <span class="hljs-keyword">return</span> start;     &#125;<br>    <span class="hljs-function">iterator <span class="hljs-title">end</span><span class="hljs-params">()</span></span>&#123;     <span class="hljs-keyword">return</span> finish;     &#125;<br>    <span class="hljs-function">size_type <span class="hljs-title">size</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>&#123;     <span class="hljs-keyword">return</span> finish - start;     &#125;<br>    <span class="hljs-function">size_type <span class="hljs-title">capacity</span><span class="hljs-params">()</span><span class="hljs-keyword">const</span></span>&#123;     <span class="hljs-keyword">return</span> end_of_storage -start;     &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">char</span>* start;<br>    <span class="hljs-keyword">char</span>* finish;<br>    <span class="hljs-keyword">char</span>* end_of_storage;<br>&#125;  <br></code></pre></td></tr></table></figure> </details> <details> <summary>另一种实现方式</summary> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">string</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span> :<br>    <span class="hljs-function"><span class="hljs-keyword">const</span> _pointer <span class="hljs-title">data</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>&#123;    <span class="hljs-keyword">return</span> start;     &#125;<br>    <span class="hljs-function">iterator <span class="hljs-title">begin</span><span class="hljs-params">()</span></span>&#123;     <span class="hljs-keyword">return</span> start;     &#125;<br>    <span class="hljs-function">iterator <span class="hljs-title">end</span><span class="hljs-params">()</span></span>&#123;     <span class="hljs-keyword">return</span> finish;     &#125;<br>    <span class="hljs-function">size_type <span class="hljs-title">size</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>&#123;     <span class="hljs-keyword">return</span> size_;     &#125;<br>    <span class="hljs-function">size_type <span class="hljs-title">capacity</span><span class="hljs-params">()</span><span class="hljs-keyword">const</span></span>&#123;     <span class="hljs-keyword">return</span> capacity;     &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">char</span>* start;<br>    <span class="hljs-keyword">size_t</span> size_;<br>    <span class="hljs-keyword">size_t</span> capacity;<br>&#125;  <br></code></pre></td></tr></table></figure> </details></li><li><p><strong>COW</strong></p> <a class="btn" href="https://www.cnblogs.com/promise6522/archive/2012/03/22/2412686.html"  title="std::string的Copy-on-Write：不如想象中美好" target="_blank">链接</a><p>复制的时候不立即申请新的空间，而是把这一过程延迟到写操作的时候，因为在这之前，二者的数据是完全相同的，无需复制。</p><p>这其实是一种广泛采用的通用优化策略，它的核心思想是懒惰处理多个实体的资源请求，在多个实体之间共享某些资源，直到有实体需要对资源进行修改时，才真正为该实体分配私有的资源。</p> <details> <summary>string对象里只放一个指针</summary> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">string</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>        <span class="hljs-keyword">size_t</span> size_;<br>        <span class="hljs-keyword">size_t</span> capacity;<br>        <span class="hljs-keyword">size_t</span> refcount;<br>        <span class="hljs-keyword">char</span>* data[<span class="hljs-number">1</span>];<span class="hljs-comment">//变量长度</span><br>&#125; <br>    <span class="hljs-keyword">char</span>* start;     <br>&#125;;<br></code></pre></td></tr></table></figure> </details><p>操作复杂度</p><p>拷贝字符串<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p><p>拷贝之后第一次operator[]可能是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></p><p>优点：</p><ol><li>一方面减少了分配（和复制）大量资源带来的瞬间延迟（注意仅仅是latency，但实际上该延迟被分摊到后续的操作中，其累积耗时很可能比一次统一处理的延迟要高，造成throughput下降是有可能的）</li><li>另一方面减少不必要的资源分配。（例如在fork的例子中，并不是所有的页面都需要复制，比如父进程的代码段(.code)和只读数据(.rodata)段，由于不允许修改，根本就无需复制。而如果fork后面紧跟exec的话，之前的地址空间都会废弃，花大力气的分配和复制只是徒劳无功。）</li></ol><p>缺点：</p><ol><li><p>refcount 需要原子操作，性能有损耗。</p></li><li><p>某些情况下会带来意外的开销。比如非 const 成员使用[]，这会触发 COW，因为无法知晓应用程序是否会对返回的字符做修改。典型的如Legality of COW std::string implementation in C++11中举的例子：</p></li></ol> <details> <summary>Code</summary> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> <span class="hljs-title">s</span><span class="hljs-params">(<span class="hljs-string">&quot;str&quot;</span>)</span></span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* p = s.data();<br>&#123;<br>    <span class="hljs-function"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> <span class="hljs-title">s2</span><span class="hljs-params">(s)</span></span>;<br>    (<span class="hljs-keyword">void</span>) s[<span class="hljs-number">0</span>];<span class="hljs-comment">// 触发COW</span><br>&#125;<br><span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<span class="hljs-comment">// p指向的原有空间已经无效</span><br></code></pre></td></tr></table></figure> </details></li><li><p><strong>SSO</strong></p><p>Small String Optimization. 基于字符串大多数比较短的特点，利用 string 对象本身的栈空间来存储短字符串。</p><p>而当字符串长度大于某个临界值时，则使用 eager copy 的方式。</p><details><summary>Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">string</span>&#123;</span><br>     <span class="hljs-keyword">char</span>* start;<br>     <span class="hljs-keyword">size_t</span> size;<br>     <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> KlocalSize = <span class="hljs-number">15</span>;<br>     <span class="hljs-class"><span class="hljs-keyword">union</span>&#123;</span><br>         <span class="hljs-keyword">char</span> buf[klocalSize+<span class="hljs-number">1</span>];<br>         <span class="hljs-keyword">size_t</span> capacity;<br>     &#125;data;<br> &#125;;<br></code></pre></td></tr></table></figure></details><p>优点：</p><p>短字符串时，无动态内存分配。</p><p>缺点：</p><p>string 对象占用空间比 eager copy 和 cow 要大。</p></li></ol><h3 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h3><p>The storage is selected as follows(assuming we store one-byte characters on a 64-bit machine):</p><ol><li><p>“small” strings between <strong>0 and 23 chars</strong> are stored in-situ without allocation (the rightmost byte<br />stores the size); <strong>使用SSO</strong></p></li><li><p>“medium” strings from <strong>24 through 254 chars</strong> are stored in malloc-allocated memory that is copied eagerly;<strong>使用eager copy</strong></p></li><li><p>“large” strings of <strong>255 chars and above</strong> are stored in a similarstructure as medium arrays, except that the string is reference-counted and copied lazily. the reference count is allocated right before the character array.<strong>使用COW</strong></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>源码</category>
      
      <category>folly</category>
      
    </categories>
    
    
    <tags>
      
      <tag>folly</tag>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程序设计课程实践答案</title>
    <link href="/2021/03/18/programming-practice/"/>
    <url>/2021/03/18/programming-practice/</url>
    
    <content type="html"><![CDATA[<p><strong>智慧树课程作业答案</strong></p><p><strong>勿直接复制粘贴提交作业！</strong></p><a id="more"></a><h3 id="第一次作业"><a class="markdownIt-Anchor" href="#第一次作业"></a> 第一次作业</h3><ol start="2"><li><p>编写程序，在第1.1题基础上合并2个单链表，合并前后单链表保持递增或相等次序，显示合并前后单链表。注意不可存在内存泄漏。请上传编写好的源程序以及运行截图。此题为必做题，25分。</p> <details> <summary>Code</summary> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span><span class="hljs-title">Node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span>data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">next</span>;</span><br>&#125;;<br><br><span class="hljs-comment">//将元素插入有序单链表中，插入后仍然有序</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Insert</span> <span class="hljs-params">(struct Node *la, <span class="hljs-keyword">int</span> x)</span></span>;<br><span class="hljs-comment">//销毁单链表</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Destory</span> <span class="hljs-params">(struct Node *la)</span></span>;<br><span class="hljs-comment">//打印单链表</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span> <span class="hljs-params">(struct Node *la)</span></span>;<br><span class="hljs-comment">//动态分配一个结点，返回结点指针</span><br><span class="hljs-comment">//分配失败时，简化程序，退出运行</span><br><span class="hljs-function">struct Node *<span class="hljs-title">NewNode</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">p</span>;</span><br>    p = (struct Node *) <span class="hljs-built_in">malloc</span> (<span class="hljs-keyword">sizeof</span> (struct Node));<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) &#123; <span class="hljs-comment">//分配失败</span><br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Error : out of memory\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//建立带头节点的单链表</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">la</span> =</span> NewNode ();<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">lb</span> =</span> NewNode();<br>    la-&gt;next = <span class="hljs-literal">NULL</span>;<br>    lb-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入需要插入整数的个数:\n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入插入的整数:\n&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> x;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>        <span class="hljs-comment">//将元素插入有序单链表中，插入后仍然有序</span><br>        <span class="hljs-keyword">if</span>(x&gt;<span class="hljs-number">0</span>)Insert (la, x);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">0</span>)Insert(lb,x);<br>    &#125;<br>    <span class="hljs-comment">//打印单链表</span><br>    Print (la);<br>    Print (lb);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">l</span>=</span>la;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">r</span>=</span>lb;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">lc</span>=</span>NewNode();<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">last</span>=</span>lc;<br>    lc-&gt;next=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">while</span>(l-&gt;next!=<span class="hljs-literal">NULL</span>&amp;&amp;r-&gt;next!=<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">if</span>(l-&gt;next-&gt;data&lt;=r-&gt;next-&gt;data)&#123;<br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">q</span>=</span>NewNode();<br>            q-&gt;data=l-&gt;next-&gt;data;<br>            q-&gt;next=<span class="hljs-literal">NULL</span>;<br>            last-&gt;next=q;<br>            last=last-&gt;next;<br>            l=l-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            struct Node *q=NewNode();<br>            q-&gt;data=r-&gt;next-&gt;data;<br>            q-&gt;next=<span class="hljs-literal">NULL</span>;<br>            last-&gt;next=q;<br>            last=last-&gt;next;<br>            r=r-&gt;next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(l-&gt;next!=<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">q</span>=</span>NewNode();<br>        q-&gt;data=l-&gt;next-&gt;data;<br>        q-&gt;next=<span class="hljs-literal">NULL</span>;<br>        last-&gt;next=q;<br>        last=last-&gt;next;<br>        l=l-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(r-&gt;next!=<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">q</span>=</span>NewNode();<br>        q-&gt;data=r-&gt;next-&gt;data;<br>        q-&gt;next=<span class="hljs-literal">NULL</span>;<br>        last-&gt;next=q;<br>        last=last-&gt;next;<br>        r=r-&gt;next;<br>    &#125;<br>    <span class="hljs-comment">//销毁单链表，避免内存泄漏</span><br>    Destory (la);<br>    Destory (lb);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;合并后的链表：\n&quot;</span>);<br>    Print(lc);<br>    Destory(lc);<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//将元素插入有序单链表中，插入后仍然有序</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Insert</span> <span class="hljs-params">(struct Node *la, <span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//申请结点</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">q</span>=</span> NewNode ();<br>    q-&gt;data = x;<br>    <span class="hljs-comment">//查找合适插入位置</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">p</span> =</span> la;<br>    <span class="hljs-keyword">while</span> (p-&gt;next &amp;&amp; x &gt; p-&gt;next -&gt;data)<br>        p = p-&gt;next; <span class="hljs-comment">//往后移一位置</span><br>    <span class="hljs-comment">//将结点插入p所指结点后</span><br>    q-&gt;next = p -&gt;next ;<br>    p-&gt;next = q;<br>&#125;<br><span class="hljs-comment">//销毁单链表</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Destory</span> <span class="hljs-params">(struct Node *la)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (la)<br>    &#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">q</span> =</span> la-&gt;next;<br>        <span class="hljs-built_in">free</span> (la); <span class="hljs-comment">//释放指针所指结点</span><br>        la = q;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//打印单链表</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span> <span class="hljs-params">(struct Node *la)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//头结点无数据</span><br>    la = la -&gt;next;<br>    <span class="hljs-keyword">if</span> (la)  <span class="hljs-comment">//数据比-〉多一个</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;%d&quot;</span>, la-&gt;data);<br>        la = la-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (la)<br>    &#123;<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;-&gt;%d&quot;</span>, la-&gt;data);<br>        la = la-&gt;next;<br>    &#125;<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure> </details></li><li><p>在第1.1题建立2个单链表基础上，设计和实现就地逆置单链表函数，即利用原单链表结点建立元素次序相反的单链表。编写程序，建立2个单链表，就地逆置这2个单链表，显示逆置前后的各单链表。注意不可存在内存泄漏。请上传编写好的源程序以及运行截图。此题为必做题，25分。</p> <details> <summary>Code</summary> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">reverse</span><span class="hljs-params">(struct Node *head)</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">p</span>=</span>head-&gt;next;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">q</span>=</span><span class="hljs-literal">NULL</span>;<br>    head-&gt;next=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)&#123;<br>        q = p-&gt;next;          <span class="hljs-comment">/*保存下一个节点*/</span>  <br>        p-&gt;next = head-&gt;next; <span class="hljs-comment">/*把节点插入到头结点后面*/</span>  <br>        head-&gt;next = p;       <span class="hljs-comment">/*头结点一直指向最新插入的节点*/</span>  <br>        p = q;                <span class="hljs-comment">/*调整指针，指向下一个节点*/</span>  <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure> </details></li><li><p>编写程序，在前面建立1个带头结点单链表的基础上，设计一个实现单链表分离算法的Split函数，将原单链表中值为偶数的结点分离出来形成一个新单链表，新单链表中头结点重新申请，其余结点来自原链表，分离后，原链表中只剩非偶数值所在结点，最后显示2个单链表，在程序退出前销毁单链表。要求Split算法时间复杂性达到O（n）,程序不可存在内存泄漏。请上传编写好的源程序以及运行截图。此题为选做题，15分。</p> <details> <summary>Code</summary> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">struct Node *<span class="hljs-title">Split</span><span class="hljs-params">(struct Node *la)</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">p</span>=</span>NewNode();<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">e</span>=</span>p;<br>    <span class="hljs-keyword">while</span>(la-&gt;next!=<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">if</span>(la-&gt;next-&gt;data%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)&#123;<br>            e-&gt;next=la-&gt;next;<br>            la-&gt;next=la-&gt;next-&gt;next;  <br>            e-&gt;next-&gt;next=<span class="hljs-literal">NULL</span>;<br>            e=e-&gt;next;<br>        &#125; <br>        la=la-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure> </details></li><li><p>约瑟夫环是个经典的问题。有M个人围坐成一圈，编号依次从1开始递增，现从编号为1的人开始报数，报到N的人出列，然后再从下一人开始重新报数，报到N的人出列；重复这一过程，直至所有人出列。求出列次序。本题要求用循环单链表实现。提示：开始时将循环单链表的指针变量设为空，添加第1人时，将结点的指针域指向自己，后面新添加人员时，在循环单链表指针变量所指尾部后添加新结点，并始终将循环单链表指针变量指向新添加结点，对应M个人的循环单链表中有M个结点；报数时，报到指定数后输出对应结点里的人员编号，并将该结点从链表中删除。题目输入包括M、N两个正整数，题目要求按出队列顺序输出他们的编号。如样例输入10 3；程序应该输出：3   6   9   2   7   1   8   5  10   4。请上传编写好的源程序以及运行截图。此题为选做题，10分。</p> <details> <summary>Code</summary> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Josephus</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入m和n：&quot;</span>);<br>    <span class="hljs-keyword">int</span> m,n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;m,&amp;n);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">la</span> =</span> NewNode ();<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">head</span>=</span>la;<br>    la-&gt;next=la;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">lb</span>=</span>NewNode();<br>        lb-&gt;data=i;<br>        lb-&gt;next=head;<br>        la-&gt;next=lb;<br>        la=la-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">int</span> num=<span class="hljs-number">0</span>;<br>    la=head;<br>    <span class="hljs-keyword">while</span>(++num)&#123;<br>        <span class="hljs-keyword">if</span>(la-&gt;next==la)<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span>(la-&gt;next==head)la=head; <br>        <span class="hljs-keyword">if</span>(num%n==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,la-&gt;next-&gt;data);<br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">e</span>=</span>la-&gt;next;<br>            la-&gt;next=la-&gt;next-&gt;next;<br>            <span class="hljs-built_in">free</span>(e);<br>        &#125;<br>        <span class="hljs-keyword">else</span> la=la-&gt;next;<br>    &#125;<br>    Print(head);<br>    Destory(head);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Destory</span> <span class="hljs-params">(struct Node *la)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (la-&gt;next!=la)<br>    &#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">q</span> =</span> la-&gt;next;<br>        <span class="hljs-built_in">free</span> (la); <span class="hljs-comment">//释放指针所指结点</span><br>        la = q;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure> </details></li></ol><h3 id="第二次作业"><a class="markdownIt-Anchor" href="#第二次作业"></a> 第二次作业</h3><ol start="6"><li><p>又见约瑟夫环：有M个人围坐成一圈， 编号依次从1开始递增直到M，现从编号为1的人开始报数，报到N的人出列，然后再从下一人开始重新报数，报到N的人出列；重复这一过程，直至所有人出列。所有出列的人再次按出列顺序围坐成一圈，并从第1人开始报数，这次为报到K的人出队列，然后再从下一人开始重新报数，报到K的人出列；重复这一过程，直至所有人出列。求最后出列次序。题目输入包括M、N、K三个正整数；N、K可能为1。题目要求按最后出队列顺序输出他们的编号，每个测试用例结果占一行，每个编号占4位。本题要求使用链表实现。（25分）</p><p>样例输入：10   3   5</p><p>程序应该输出：   7   4   1   6  10   5   3   2   8   9</p> <details> <summary>Code</summary> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">struct Node* <span class="hljs-title">Josephus</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m,<span class="hljs-keyword">int</span> n)</span></span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">la</span>=</span>NewNode();<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">head</span>=</span>la;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">se</span>=</span>NewNode();<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">headse</span>=</span>se;<br>la-&gt;next=la;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">lb</span>=</span>NewNode();<br>    lb-&gt;data=i;<br>    lb-&gt;next=head;<br>    la-&gt;next=lb;<br>    la=la-&gt;next;<br>&#125;<br><span class="hljs-keyword">int</span> num=<span class="hljs-number">0</span>;<br>la=head;<br><span class="hljs-keyword">while</span>(++num)&#123;<br>    <span class="hljs-keyword">if</span>(la-&gt;next==la)<span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">if</span>(la-&gt;next==head)la=head; <br>    <span class="hljs-keyword">if</span>(num%n==<span class="hljs-number">0</span>)&#123;<br>        se-&gt;next=la-&gt;next;<br>        <span class="hljs-comment">//printf(&quot;%d &quot;,se-&gt;next-&gt;data);</span><br>        la-&gt;next=la-&gt;next-&gt;next;<br>        se-&gt;next-&gt;next=headse;<br>        se=se-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">else</span> la=la-&gt;next;<br>&#125;<br><span class="hljs-comment">//Print(headse);</span><br>Destory(head);<br><span class="hljs-keyword">return</span> headse;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Josephus_second</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m,<span class="hljs-keyword">int</span> n,struct Node *la)</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">head</span>=</span>la;<br>    <span class="hljs-keyword">int</span> num=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(++num)&#123;<br>        <span class="hljs-keyword">if</span>(la-&gt;next==la)<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span>(la-&gt;next==head)la=head; <br>        <span class="hljs-keyword">if</span>(num%n==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%4d&quot;</span>,la-&gt;next-&gt;data);<br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">e</span>=</span>la-&gt;next;<br>            la-&gt;next=la-&gt;next-&gt;next;<br>            <span class="hljs-built_in">free</span>(e);<br>        &#125;<br>        <span class="hljs-keyword">else</span> la=la-&gt;next;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入m,n,k：&quot;</span>);<br>    <span class="hljs-keyword">int</span> m,n,k;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;m,&amp;n,&amp;k);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">se</span>=</span>Josephus(m,n);<br>    Josephus_second(m,k,se);<br>    Destory(se);<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure> </details></li><li><p>好玩的约瑟夫环：有M个人，编号分别为1到M，玩约瑟夫环游戏，最初时按编号顺序排成队列；每遍游戏开始时，有一个正整数报数密码N，队列中人依次围坐成一圈，从队首的人开始报数，报到N的人出列，然后再从出列的下一人开始重新报数，报到N的人出列；重复这一过程，直至所有人出列，完成一遍游戏，所有出列的人形成新队列；游戏可能玩很多遍，每遍有新报数密码。求若干遍游戏完成后队列次序。题目输入包括若干个正整数（至少1个），第一个正整数为玩游戏人数M，后续每个正整数为每遍游戏报数密码，报数密码可能为1，题目要求按出队列顺序输出他们的编号。本题要求使用链表实现。（25分）</p><p>样例输入 ：10   3   5    2</p><p>样例输出 ：4   6   5   2   9   1   3   7   8  10</p> <details> <summary>Code</summary> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//destroy和print函数有所修改</span><br><span class="hljs-function">struct Node* <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">la</span>=</span>NewNode();<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">head</span>=</span>la;<br>    la-&gt;next=la;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">lb</span>=</span>NewNode();<br>        lb-&gt;data=i;<br>        lb-&gt;next=head;<br>        la-&gt;next=lb;<br>        la=la-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br><span class="hljs-function">struct Node* <span class="hljs-title">Josephus</span><span class="hljs-params">(struct Node *la,<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">head</span>=</span>la;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">se</span>=</span>NewNode();<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">headse</span>=</span>se;<br>    <span class="hljs-keyword">int</span> num=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(++num)&#123;<br>        <span class="hljs-keyword">if</span>(la-&gt;next==la)<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span>(la-&gt;next==head)la=head; <br>        <span class="hljs-keyword">if</span>(num%n==<span class="hljs-number">0</span>)&#123;<br>            se-&gt;next=la-&gt;next;<br>            la-&gt;next=la-&gt;next-&gt;next;<br>            se-&gt;next-&gt;next=headse;<br>            se=se-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">else</span> la=la-&gt;next;<br>    &#125;<br>    Destory(head);<br>    <span class="hljs-keyword">return</span> headse;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;m);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">se</span>=</span>init(m);<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n))&#123;<br>        se=Josephus(se,n);<br>    &#125;<br>    Print(se);<br>    Destory(se);<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure> </details></li><li><p>无符号大数加、减运算。程序设计中经常遇到无符号大数加、减运算问题，请在样例程序Ex1.4基础上实现无符号大数减运算。题目要求输入两个无符号大数，保证一个大数不小于第二个大数，输出它们的和、差。（25分）</p><p>样例输入</p><p>1234567890987654321333888999666</p><p>147655765659657669789687967867</p><p>样例输出</p><p>1382223656647311991123576967533</p><p>1086912125327996651544201031799</p> <details> <summary>Code</summary> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//因为保证第一个大数不小于第二个大数，所以减法处进行了简化</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">typedef</span>  <span class="hljs-keyword">int</span> DataElem;    <span class="hljs-comment">//假设元素类型为整形</span><br><span class="hljs-comment">//线性表类型</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SeqList</span> &#123;</span><br>    DataElem *pDatas;   <span class="hljs-comment">//存放元素表的缓冲区指针</span><br>    <span class="hljs-keyword">int</span>       iLength;  <span class="hljs-comment">//线性表长度</span><br>    <span class="hljs-keyword">int</span>       iSize;    <span class="hljs-comment">//缓冲区大小</span><br>&#125;;<br><span class="hljs-keyword">typedef</span>  DataElem *  Position;    <span class="hljs-comment">//线性表中位置类型</span><br><span class="hljs-comment">//1. 创建空线性表</span><br><span class="hljs-comment">//建立一个最多可存放iSize个元素的空线性表，失败时缓冲区指针为NULL</span><br><span class="hljs-function">struct SeqList <span class="hljs-title">Create</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> iSize)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SeqList</span> <span class="hljs-title">list</span>;</span><br>    <span class="hljs-comment">//申请存放线性表元素的连续内存空间</span><br>    <span class="hljs-built_in">list</span>.pDatas = (DataElem *)<span class="hljs-built_in">malloc</span> (iSize * <span class="hljs-keyword">sizeof</span> (DataElem));<br>    <span class="hljs-built_in">list</span>.iLength = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">list</span>.iSize = iSize;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span>.pDatas == <span class="hljs-literal">NULL</span>) &#123;<span class="hljs-comment">//申请不到空间</span><br>        <span class="hljs-built_in">list</span>.iSize = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>;<br>&#125;<br><span class="hljs-comment">//2. 线性表清空</span><br><span class="hljs-comment">//元素个数置为0</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Clear</span> <span class="hljs-params">(struct SeqList *pSeqList)</span></span><br><span class="hljs-function"></span>&#123;<br>    pSeqList-&gt;iLength = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//3. 销毁一个线性表，不再使用，释放缓冲区</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Destroy</span> <span class="hljs-params">(struct SeqList *pSeqList)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">free</span> (pSeqList-&gt;pDatas);                  <span class="hljs-comment">//释放缓冲区</span><br>    pSeqList-&gt;pDatas = <span class="hljs-literal">NULL</span>;<br>    pSeqList-&gt;iSize = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//4. 根据已有线性表，复制一个内容相同的新线性表</span><br><span class="hljs-comment">//返回复制后新线性表，失败时返回线性表的头指针为NULL，</span><br><span class="hljs-function">struct SeqList <span class="hljs-title">Copy</span> <span class="hljs-params">(struct SeqList srcSeqList)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SeqList</span> <span class="hljs-title">destSeqList</span>;</span><br>    destSeqList = Create (srcSeqList.iSize); <span class="hljs-comment">//创建一个具有相同大小缓冲区的空线性表</span><br>    <span class="hljs-keyword">if</span> (destSeqList.pDatas == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> destSeqList;  <span class="hljs-comment">//创建失败时直接返回</span><br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; srcSeqList.iLength; ++i) <span class="hljs-comment">//复制所有元素</span><br>        destSeqList.pDatas [i] = srcSeqList.pDatas [i];<br>    destSeqList.iLength = i; <span class="hljs-comment">//设置线性表长度</span><br>    <span class="hljs-keyword">return</span> destSeqList; <span class="hljs-comment">//返回复制完的线性表</span><br>&#125;<br><br><span class="hljs-comment">//5. 线性表判空。</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">IsEmpty</span> <span class="hljs-params">(struct SeqList <span class="hljs-built_in">list</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">list</span>.iLength == <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-comment">//6. 线性表求长度。</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Length</span> <span class="hljs-params">(struct SeqList <span class="hljs-built_in">list</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>.iLength;<br>&#125;<br><span class="hljs-comment">//7. 获取起始位置。</span><br><span class="hljs-comment">//返回线性表中代表第一个元素的位置，空表返回EndPosition (L)</span><br><span class="hljs-function">Position <span class="hljs-title">BeginPosition</span> <span class="hljs-params">(struct SeqList <span class="hljs-built_in">list</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>.pDatas;<br>&#125;<br><span class="hljs-comment">//8. 获取结束位置。</span><br><span class="hljs-comment">//返回代表线性表结束的位置</span><br><span class="hljs-function">Position  <span class="hljs-title">EndPosition</span> <span class="hljs-params">(struct SeqList <span class="hljs-built_in">list</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>.pDatas + <span class="hljs-built_in">list</span>.iLength;<br>&#125;<br><span class="hljs-comment">//9. 迭代下一位置。</span><br><span class="hljs-comment">//返回线性表中p有效位置的下个位置，主要用于循环遍历线性表</span><br><span class="hljs-function">Position <span class="hljs-title">NextPosition</span> <span class="hljs-params">(struct SeqList <span class="hljs-built_in">list</span>, Position  pos)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> pos+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//10. 获取元素位置。</span><br><span class="hljs-comment">//返回线性表代表第i个元素所在位置，1≤i≤n（设线性表的表长为n）</span><br><span class="hljs-function">Position <span class="hljs-title">LocatePosition</span> <span class="hljs-params">(struct SeqList <span class="hljs-built_in">list</span>, <span class="hljs-keyword">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">1</span> &amp;&amp; i &lt;= <span class="hljs-built_in">list</span>.iLength)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>.pDatas + (i - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>.pDatas + <span class="hljs-built_in">list</span>.iLength; <span class="hljs-comment">//超出范围，返回结束位置</span><br>&#125;<br><span class="hljs-comment">//11. 定位元素位置</span><br><span class="hljs-comment">//根据数据元素e查找它在线性表中出现的位置，若存在，则返回它的有效位置；</span><br><span class="hljs-comment">//否则返回EndPosition (L)</span><br><span class="hljs-function">Position <span class="hljs-title">LocateElem</span> <span class="hljs-params">(struct SeqList <span class="hljs-built_in">list</span>, DataElem e)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span>  i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">list</span>.iLength; ++i)<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span>.pDatas [i] == e) <span class="hljs-comment">//查找到</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>.pDatas + i;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>.pDatas + <span class="hljs-built_in">list</span>.iLength; <span class="hljs-comment">//超出范围，返回结束位置</span><br>&#125;<br><span class="hljs-comment">//12. 获取元素</span><br><span class="hljs-comment">//返回线性表L中pos有效位置的数据元素</span><br><span class="hljs-function">DataElem <span class="hljs-title">GetElem</span> <span class="hljs-params">(struct SeqList <span class="hljs-built_in">list</span>, Position  pos)</span></span><br><span class="hljs-function"></span>&#123;<br>    assert (pos != EndPosition (<span class="hljs-built_in">list</span>)); <span class="hljs-comment">//断言，包含头文件assert.h</span><br>    <span class="hljs-keyword">return</span> *pos;<br>&#125;<br><span class="hljs-comment">//13. 设置元素</span><br><span class="hljs-comment">//将线性表中pos有效位置的数据元素设置为e</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SetElem</span> <span class="hljs-params">(struct SeqList <span class="hljs-built_in">list</span>, Position  pos, DataElem e)</span></span><br><span class="hljs-function"></span>&#123;<br>    assert (pos != EndPosition (<span class="hljs-built_in">list</span>)); <span class="hljs-comment">//断言，包含头文件assert.h</span><br>    *pos = e;<br>&#125;<br><span class="hljs-comment">//14. 插入元素。</span><br><span class="hljs-comment">//在线性表的pos位置前插入一新的数据元素，</span><br><span class="hljs-comment">//pos为EndPosition (L)时添加在尾部，线性表长度加1</span><br><span class="hljs-comment">//成功时返回1，失败时返回0</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">InsertBefore</span> <span class="hljs-params">(struct SeqList *pSeqList, Position  pos, DataElem e)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (pSeqList-&gt;iSize == pSeqList-&gt;iLength) &#123;<span class="hljs-comment">//空间已满，先扩充空间</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SeqList</span> <span class="hljs-title">newSeqList</span> =</span> Create (<span class="hljs-number">2</span> * pSeqList-&gt;iSize); <span class="hljs-comment">//建立2倍空间的临时线性表</span><br>        <span class="hljs-keyword">if</span> (newSeqList.pDatas == <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//申请不到空间，操作失败</span><br>        &#125;<br>        <span class="hljs-keyword">int</span> i;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; pSeqList-&gt;iLength; ++i) <span class="hljs-comment">//复制所有元素</span><br>            newSeqList.pDatas [i] = pSeqList-&gt;pDatas [i];<br>        newSeqList.iLength = i; <span class="hljs-comment">//设置线性表长度</span><br>        pos = newSeqList.pDatas + (pos - pSeqList-&gt;pDatas); <span class="hljs-comment">//原pos必须更新</span><br>        Destroy(pSeqList);       <span class="hljs-comment">//销毁原线性表，板卡它的缓冲区，避免内存泄漏</span><br>        *pSeqList = newSeqList;  <span class="hljs-comment">//用扩充空间后线性表代替原线性表</span><br>    &#125;<br>    assert (pSeqList-&gt;iSize &gt; pSeqList-&gt;iLength); <span class="hljs-comment">//线性表内存空间必有空余</span><br>    Position  lastPos = pSeqList-&gt;pDatas+pSeqList-&gt;iLength; <span class="hljs-comment">//线性表后空余位置</span><br>    <span class="hljs-keyword">while</span> (pos != lastPos) &#123; <span class="hljs-comment">//从后往前循环后移，直到到达指定位置</span><br>        *lastPos = *(lastPos<span class="hljs-number">-1</span>); <span class="hljs-comment">//元素后移一个位置</span><br>        --lastPos;               <span class="hljs-comment">//准备处理前一位置元素</span><br>    &#125;<br>    *pos = e;           <span class="hljs-comment">//将元素存入已空出位置</span><br>    ++pSeqList-&gt;iLength; <span class="hljs-comment">//调整线性表长度</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//15. 删除元素。</span><br><span class="hljs-comment">//删除线性表中pos有效位置所在数据元素，线性表的表长减1</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Delete</span> <span class="hljs-params">(struct SeqList *pSeqList, Position  pos)</span></span><br><span class="hljs-function"></span>&#123;<br>    Position  endPos = EndPosition (*pSeqList);<br>    assert (pos != endPos); <span class="hljs-comment">//断言，包含头文件assert.h</span><br>    ++pos; <span class="hljs-comment">//后移一位置</span><br>    <span class="hljs-keyword">while</span> (pos!= endPos) &#123;<br>        *(pos - <span class="hljs-number">1</span>) = *pos; <span class="hljs-comment">//后一位置元素前移</span><br>        ++pos;           <span class="hljs-comment">//准备后移下一个元素</span><br>    &#125;<br>    --pSeqList-&gt;iLength; <span class="hljs-comment">//调整线性表长度</span><br>&#125;<br><br><span class="hljs-comment">//16. 迭代上一位置。</span><br><span class="hljs-comment">//返回线性表中p有效位置的下个位置，主要用于循环遍历线性表</span><br><span class="hljs-function">Position <span class="hljs-title">LastPosition</span> <span class="hljs-params">(struct SeqList <span class="hljs-built_in">list</span>, Position  pos)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> pos<span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(struct SeqList <span class="hljs-built_in">list</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    Position pos = EndPosition(<span class="hljs-built_in">list</span>)<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">int</span> flag=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (pos != BeginPosition(<span class="hljs-built_in">list</span>)<span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">if</span>(GetElem(<span class="hljs-built_in">list</span>,pos)==<span class="hljs-number">0</span>&amp;&amp;flag==<span class="hljs-number">0</span>&amp;&amp;pos!=BeginPosition(<span class="hljs-built_in">list</span>))&#123;<br>            pos = LastPosition(<span class="hljs-built_in">list</span>, pos);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        flag=<span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;%d&quot;</span>, GetElem (<span class="hljs-built_in">list</span>, pos));<br>        pos = LastPosition(<span class="hljs-built_in">list</span>, pos);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-function">struct SeqList <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(struct SeqList list1,struct SeqList list2)</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SeqList</span> <span class="hljs-title">list3</span>=</span>Create(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">int</span> len1=Length(list1);<br>    <span class="hljs-keyword">int</span> len2=Length(list2);<br>    <span class="hljs-keyword">int</span> up=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> num=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(len1&gt;num&amp;&amp;len2&gt;num)&#123;<br>        <span class="hljs-keyword">int</span> x=list1.pDatas[num]+list2.pDatas[num]+up;<br>        up=x/<span class="hljs-number">10</span>;<br>        x%=<span class="hljs-number">10</span>;<br>        InsertBefore(&amp;list3,EndPosition(list3),x);<br>        num++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(len1&lt;=num)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=num;i&lt;len2;i++)&#123;<br>            <span class="hljs-keyword">int</span> x=list2.pDatas[num]+up;<br>            up=x/<span class="hljs-number">10</span>;<br>            x%=<span class="hljs-number">10</span>;<br>            InsertBefore(&amp;list3,EndPosition(list3),x);<br>            num++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(len2&lt;=num)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=num;i&lt;len1;i++)&#123;<br>            <span class="hljs-keyword">int</span> x=list1.pDatas[num]+up;<br>            up=x/<span class="hljs-number">10</span>;<br>            x%=<span class="hljs-number">10</span>;<br>            InsertBefore(&amp;list3,EndPosition(list3),x);<br>            num++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(up!=<span class="hljs-number">0</span>)&#123;<br>        InsertBefore(&amp;list3,EndPosition(list3),up);<br>    &#125;<br>    <span class="hljs-keyword">return</span> list3;<br>&#125;<br><span class="hljs-function">struct SeqList <span class="hljs-title">subTwoNumbers</span><span class="hljs-params">(struct SeqList list1,struct SeqList list2)</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SeqList</span> <span class="hljs-title">list3</span>=</span>Create(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">int</span> len1=Length(list1);<br>    <span class="hljs-keyword">int</span> len2=Length(list2);<br>    <span class="hljs-keyword">int</span> back=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> num=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(len1&gt;num&amp;&amp;len2&gt;num)&#123;<br>        <span class="hljs-keyword">int</span> x=list1.pDatas[num]-list2.pDatas[num]-back;<br>        back=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">0</span>)&#123;<br>            x+=<span class="hljs-number">10</span>;<br>            back++;<br>        &#125;<br>        InsertBefore(&amp;list3,EndPosition(list3),x);<br>        num++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> list3;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SeqList</span> <span class="hljs-title">list1</span>=</span>Create(<span class="hljs-number">1</span>);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SeqList</span> <span class="hljs-title">list2</span>=</span>Create(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">char</span> num1[<span class="hljs-number">100</span>],num2[<span class="hljs-number">100</span>];<br>    gets(num1);<br>    <span class="hljs-keyword">int</span> len1=<span class="hljs-built_in">strlen</span>(num1);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=len1<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>        InsertBefore(&amp;list1,EndPosition(list1),num1[i]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>    &#125;<br>    <span class="hljs-comment">//Print(list1);</span><br><br>    gets(num2);<br>    <span class="hljs-keyword">int</span> len2=<span class="hljs-built_in">strlen</span>(num2);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=len2<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>        InsertBefore(&amp;list2,EndPosition(list2),num2[i]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>    &#125;<br>    <span class="hljs-comment">//Print(list2);</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SeqList</span> <span class="hljs-title">list3</span>=</span>addTwoNumbers(list1,list2);<br>    Print(list3);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SeqList</span> <span class="hljs-title">list4</span>=</span>subTwoNumbers(list1,list2);<br>    Print(list4);<br>    Destroy(&amp;list1);<br>    Destroy(&amp;list2);<br>    Destroy(&amp;list3);<br>    Destroy(&amp;list4);<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">typedef</span>  <span class="hljs-keyword">int</span> DataElem;    <span class="hljs-comment">//假设元素类型为整形</span><br><span class="hljs-comment">//线性表类型</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SeqList</span> &#123;</span><br>    DataElem *pDatas;   <span class="hljs-comment">//存放元素表的缓冲区指针</span><br>    <span class="hljs-keyword">int</span>       iLength;  <span class="hljs-comment">//线性表长度</span><br>    <span class="hljs-keyword">int</span>       iSize;    <span class="hljs-comment">//缓冲区大小</span><br>&#125;;<br><span class="hljs-keyword">typedef</span>  DataElem *  Position;    <span class="hljs-comment">//线性表中位置类型</span><br><span class="hljs-comment">//1. 创建空线性表</span><br><span class="hljs-comment">//建立一个最多可存放iSize个元素的空线性表，失败时缓冲区指针为NULL</span><br><span class="hljs-function">struct SeqList <span class="hljs-title">Create</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> iSize)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SeqList</span> <span class="hljs-title">list</span>;</span><br>    <span class="hljs-comment">//申请存放线性表元素的连续内存空间</span><br>    <span class="hljs-built_in">list</span>.pDatas = (DataElem *)<span class="hljs-built_in">malloc</span> (iSize * <span class="hljs-keyword">sizeof</span> (DataElem));<br>    <span class="hljs-built_in">list</span>.iLength = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">list</span>.iSize = iSize;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span>.pDatas == <span class="hljs-literal">NULL</span>) &#123;<span class="hljs-comment">//申请不到空间</span><br>        <span class="hljs-built_in">list</span>.iSize = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>;<br>&#125;<br><span class="hljs-comment">//2. 线性表清空</span><br><span class="hljs-comment">//元素个数置为0</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Clear</span> <span class="hljs-params">(struct SeqList *pSeqList)</span></span><br><span class="hljs-function"></span>&#123;<br>    pSeqList-&gt;iLength = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//3. 销毁一个线性表，不再使用，释放缓冲区</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Destroy</span> <span class="hljs-params">(struct SeqList *pSeqList)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">free</span> (pSeqList-&gt;pDatas);                  <span class="hljs-comment">//释放缓冲区</span><br>    pSeqList-&gt;pDatas = <span class="hljs-literal">NULL</span>;<br>    pSeqList-&gt;iSize = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//4. 根据已有线性表，复制一个内容相同的新线性表</span><br><span class="hljs-comment">//返回复制后新线性表，失败时返回线性表的头指针为NULL，</span><br><span class="hljs-function">struct SeqList <span class="hljs-title">Copy</span> <span class="hljs-params">(struct SeqList srcSeqList)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SeqList</span> <span class="hljs-title">destSeqList</span>;</span><br>    destSeqList = Create (srcSeqList.iSize); <span class="hljs-comment">//创建一个具有相同大小缓冲区的空线性表</span><br>    <span class="hljs-keyword">if</span> (destSeqList.pDatas == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> destSeqList;  <span class="hljs-comment">//创建失败时直接返回</span><br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; srcSeqList.iLength; ++i) <span class="hljs-comment">//复制所有元素</span><br>        destSeqList.pDatas [i] = srcSeqList.pDatas [i];<br>    destSeqList.iLength = i; <span class="hljs-comment">//设置线性表长度</span><br>    <span class="hljs-keyword">return</span> destSeqList; <span class="hljs-comment">//返回复制完的线性表</span><br>&#125;<br><br><span class="hljs-comment">//5. 线性表判空。</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">IsEmpty</span> <span class="hljs-params">(struct SeqList <span class="hljs-built_in">list</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">list</span>.iLength == <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-comment">//6. 线性表求长度。</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Length</span> <span class="hljs-params">(struct SeqList <span class="hljs-built_in">list</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>.iLength;<br>&#125;<br><span class="hljs-comment">//7. 获取起始位置。</span><br><span class="hljs-comment">//返回线性表中代表第一个元素的位置，空表返回EndPosition (L)</span><br><span class="hljs-function">Position <span class="hljs-title">BeginPosition</span> <span class="hljs-params">(struct SeqList <span class="hljs-built_in">list</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>.pDatas;<br>&#125;<br><span class="hljs-comment">//8. 获取结束位置。</span><br><span class="hljs-comment">//返回代表线性表结束的位置</span><br><span class="hljs-function">Position  <span class="hljs-title">EndPosition</span> <span class="hljs-params">(struct SeqList <span class="hljs-built_in">list</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>.pDatas + <span class="hljs-built_in">list</span>.iLength;<br>&#125;<br><span class="hljs-comment">//9. 迭代下一位置。</span><br><span class="hljs-comment">//返回线性表中p有效位置的下个位置，主要用于循环遍历线性表</span><br><span class="hljs-function">Position <span class="hljs-title">NextPosition</span> <span class="hljs-params">(struct SeqList <span class="hljs-built_in">list</span>, Position  pos)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> pos+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//10. 获取元素位置。</span><br><span class="hljs-comment">//返回线性表代表第i个元素所在位置，1≤i≤n（设线性表的表长为n）</span><br><span class="hljs-function">Position <span class="hljs-title">LocatePosition</span> <span class="hljs-params">(struct SeqList <span class="hljs-built_in">list</span>, <span class="hljs-keyword">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">1</span> &amp;&amp; i &lt;= <span class="hljs-built_in">list</span>.iLength)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>.pDatas + (i - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>.pDatas + <span class="hljs-built_in">list</span>.iLength; <span class="hljs-comment">//超出范围，返回结束位置</span><br>&#125;<br><span class="hljs-comment">//11. 定位元素位置</span><br><span class="hljs-comment">//根据数据元素e查找它在线性表中出现的位置，若存在，则返回它的有效位置；</span><br><span class="hljs-comment">//否则返回EndPosition (L)</span><br><span class="hljs-function">Position <span class="hljs-title">LocateElem</span> <span class="hljs-params">(struct SeqList <span class="hljs-built_in">list</span>, DataElem e)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span>  i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">list</span>.iLength; ++i)<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span>.pDatas [i] == e) <span class="hljs-comment">//查找到</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>.pDatas + i;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>.pDatas + <span class="hljs-built_in">list</span>.iLength; <span class="hljs-comment">//超出范围，返回结束位置</span><br>&#125;<br><span class="hljs-comment">//12. 获取元素</span><br><span class="hljs-comment">//返回线性表L中pos有效位置的数据元素</span><br><span class="hljs-function">DataElem <span class="hljs-title">GetElem</span> <span class="hljs-params">(struct SeqList <span class="hljs-built_in">list</span>, Position  pos)</span></span><br><span class="hljs-function"></span>&#123;<br>    assert (pos != EndPosition (<span class="hljs-built_in">list</span>)); <span class="hljs-comment">//断言，包含头文件assert.h</span><br>    <span class="hljs-keyword">return</span> *pos;<br>&#125;<br><span class="hljs-comment">//13. 设置元素</span><br><span class="hljs-comment">//将线性表中pos有效位置的数据元素设置为e</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SetElem</span> <span class="hljs-params">(struct SeqList <span class="hljs-built_in">list</span>, Position  pos, DataElem e)</span></span><br><span class="hljs-function"></span>&#123;<br>    assert (pos != EndPosition (<span class="hljs-built_in">list</span>)); <span class="hljs-comment">//断言，包含头文件assert.h</span><br>    *pos = e;<br>&#125;<br><span class="hljs-comment">//14. 插入元素。</span><br><span class="hljs-comment">//在线性表的pos位置前插入一新的数据元素，</span><br><span class="hljs-comment">//pos为EndPosition (L)时添加在尾部，线性表长度加1</span><br><span class="hljs-comment">//成功时返回1，失败时返回0</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">InsertBefore</span> <span class="hljs-params">(struct SeqList *pSeqList, Position  pos, DataElem e)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (pSeqList-&gt;iSize == pSeqList-&gt;iLength) &#123;<span class="hljs-comment">//空间已满，先扩充空间</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SeqList</span> <span class="hljs-title">newSeqList</span> =</span> Create (<span class="hljs-number">2</span> * pSeqList-&gt;iSize); <span class="hljs-comment">//建立2倍空间的临时线性表</span><br>        <span class="hljs-keyword">if</span> (newSeqList.pDatas == <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//申请不到空间，操作失败</span><br>        &#125;<br>        <span class="hljs-keyword">int</span> i;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; pSeqList-&gt;iLength; ++i) <span class="hljs-comment">//复制所有元素</span><br>            newSeqList.pDatas [i] = pSeqList-&gt;pDatas [i];<br>        newSeqList.iLength = i; <span class="hljs-comment">//设置线性表长度</span><br>        pos = newSeqList.pDatas + (pos - pSeqList-&gt;pDatas); <span class="hljs-comment">//原pos必须更新</span><br>        Destroy(pSeqList);       <span class="hljs-comment">//销毁原线性表，板卡它的缓冲区，避免内存泄漏</span><br>        *pSeqList = newSeqList;  <span class="hljs-comment">//用扩充空间后线性表代替原线性表</span><br>    &#125;<br>    assert (pSeqList-&gt;iSize &gt; pSeqList-&gt;iLength); <span class="hljs-comment">//线性表内存空间必有空余</span><br>    Position  lastPos = pSeqList-&gt;pDatas+pSeqList-&gt;iLength; <span class="hljs-comment">//线性表后空余位置</span><br>    <span class="hljs-keyword">while</span> (pos != lastPos) &#123; <span class="hljs-comment">//从后往前循环后移，直到到达指定位置</span><br>        *lastPos = *(lastPos<span class="hljs-number">-1</span>); <span class="hljs-comment">//元素后移一个位置</span><br>        --lastPos;               <span class="hljs-comment">//准备处理前一位置元素</span><br>    &#125;<br>    *pos = e;           <span class="hljs-comment">//将元素存入已空出位置</span><br>    ++pSeqList-&gt;iLength; <span class="hljs-comment">//调整线性表长度</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//15. 删除元素。</span><br><span class="hljs-comment">//删除线性表中pos有效位置所在数据元素，线性表的表长减1</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Delete</span> <span class="hljs-params">(struct SeqList *pSeqList, Position  pos)</span></span><br><span class="hljs-function"></span>&#123;<br>    Position  endPos = EndPosition (*pSeqList);<br>    assert (pos != endPos); <span class="hljs-comment">//断言，包含头文件assert.h</span><br>    ++pos; <span class="hljs-comment">//后移一位置</span><br>    <span class="hljs-keyword">while</span> (pos!= endPos) &#123;<br>        *(pos - <span class="hljs-number">1</span>) = *pos; <span class="hljs-comment">//后一位置元素前移</span><br>        ++pos;           <span class="hljs-comment">//准备后移下一个元素</span><br>    &#125;<br>    --pSeqList-&gt;iLength; <span class="hljs-comment">//调整线性表长度</span><br>&#125;<br><br><span class="hljs-comment">//16. 迭代上一位置。</span><br><span class="hljs-comment">//返回线性表中p有效位置的下个位置，主要用于循环遍历线性表</span><br><span class="hljs-function">Position <span class="hljs-title">LastPosition</span> <span class="hljs-params">(struct SeqList <span class="hljs-built_in">list</span>, Position  pos)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> pos<span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(struct SeqList <span class="hljs-built_in">list</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    Position pos = EndPosition(<span class="hljs-built_in">list</span>)<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">int</span> flag=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (pos != BeginPosition(<span class="hljs-built_in">list</span>)<span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">if</span>(GetElem(<span class="hljs-built_in">list</span>,pos)==<span class="hljs-number">0</span>&amp;&amp;flag==<span class="hljs-number">0</span>&amp;&amp;pos!=BeginPosition(<span class="hljs-built_in">list</span>))&#123;<br>            pos = LastPosition(<span class="hljs-built_in">list</span>, pos);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        flag=<span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;%d&quot;</span>, GetElem (<span class="hljs-built_in">list</span>, pos));<br>        pos = LastPosition(<span class="hljs-built_in">list</span>, pos);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-function">struct SeqList <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(struct SeqList list1,struct SeqList list2)</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SeqList</span> <span class="hljs-title">list3</span>=</span>Create(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">int</span> len1=Length(list1);<br>    <span class="hljs-keyword">int</span> len2=Length(list2);<br>    <span class="hljs-keyword">int</span> up=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> num=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(len1&gt;num&amp;&amp;len2&gt;num)&#123;<br>        <span class="hljs-keyword">int</span> x=list1.pDatas[num]+list2.pDatas[num]+up;<br>        up=x/<span class="hljs-number">10</span>;<br>        x%=<span class="hljs-number">10</span>;<br>        InsertBefore(&amp;list3,EndPosition(list3),x);<br>        num++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(len1&lt;=num)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=num;i&lt;len2;i++)&#123;<br>            <span class="hljs-keyword">int</span> x=list2.pDatas[num]+up;<br>            up=x/<span class="hljs-number">10</span>;<br>            x%=<span class="hljs-number">10</span>;<br>            InsertBefore(&amp;list3,EndPosition(list3),x);<br>            num++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(len2&lt;=num)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=num;i&lt;len1;i++)&#123;<br>            <span class="hljs-keyword">int</span> x=list1.pDatas[num]+up;<br>            up=x/<span class="hljs-number">10</span>;<br>            x%=<span class="hljs-number">10</span>;<br>            InsertBefore(&amp;list3,EndPosition(list3),x);<br>            num++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(up!=<span class="hljs-number">0</span>)&#123;<br>        InsertBefore(&amp;list3,EndPosition(list3),up);<br>    &#125;<br>    <span class="hljs-keyword">return</span> list3;<br>&#125;<br><span class="hljs-function">struct SeqList <span class="hljs-title">subTwoNumbers</span><span class="hljs-params">(struct SeqList list1,struct SeqList list2)</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SeqList</span> <span class="hljs-title">list3</span>=</span>Create(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">int</span> len1=Length(list1);<br>    <span class="hljs-keyword">int</span> len2=Length(list2);<br>    <span class="hljs-keyword">int</span> back=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> num=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(len1&gt;num&amp;&amp;len2&gt;num)&#123;<br>        <span class="hljs-keyword">int</span> x=list1.pDatas[num]-list2.pDatas[num]-back;<br>        back=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">0</span>)&#123;<br>            x+=<span class="hljs-number">10</span>;<br>            back++;<br>        &#125;<br>        InsertBefore(&amp;list3,EndPosition(list3),x);<br>        num++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> list3;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SeqList</span> <span class="hljs-title">list1</span>=</span>Create(<span class="hljs-number">1</span>);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SeqList</span> <span class="hljs-title">list2</span>=</span>Create(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">char</span> num1[<span class="hljs-number">100</span>],num2[<span class="hljs-number">100</span>];<br>    gets(num1);<br>    <span class="hljs-keyword">int</span> len1=<span class="hljs-built_in">strlen</span>(num1);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=len1<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>        InsertBefore(&amp;list1,EndPosition(list1),num1[i]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>    &#125;<br>    <span class="hljs-comment">//Print(list1);</span><br><br>    gets(num2);<br>    <span class="hljs-keyword">int</span> len2=<span class="hljs-built_in">strlen</span>(num2);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=len2<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>        InsertBefore(&amp;list2,EndPosition(list2),num2[i]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>    &#125;<br>    <span class="hljs-comment">//Print(list2);</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SeqList</span> <span class="hljs-title">list3</span>=</span>addTwoNumbers(list1,list2);<br>    Print(list3);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SeqList</span> <span class="hljs-title">list4</span>=</span>subTwoNumbers(list1,list2);<br>    Print(list4);<br>    Destroy(&amp;list1);<br>    Destroy(&amp;list2);<br>    Destroy(&amp;list3);<br>    Destroy(&amp;list4);<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure> </details></li><li><p>有符号大数加、减运算。请在样例程序Ex1.4基础上实现无符号大数比较运算（小于、小于等于、等于、大于、大于等于），并进一步实现有符号大数的加、减运算。题目要求输入两个有符号大数，输出它们的和、差。（15分）</p><p>样例输入</p><p>-1234567890987654321333888999666</p><p>147655765659657669789687967867</p><p>样例输出</p><p>-1086912125327996651544201031799</p><p>-1382223656647311991123576967533</p> <details> <summary>Code</summary> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">struct SeqList <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(struct SeqList list1,struct SeqList list2)</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SeqList</span> <span class="hljs-title">list3</span>=</span>Create(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">int</span> len1=Length(list1);<br>    <span class="hljs-keyword">int</span> len2=Length(list2);<br>    <span class="hljs-keyword">int</span> up=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> num=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(len1&gt;num&amp;&amp;len2&gt;num)&#123;<br>        <span class="hljs-keyword">int</span> x=list1.pDatas[num]+list2.pDatas[num]+up;<br>        up=x/<span class="hljs-number">10</span>;<br>        x%=<span class="hljs-number">10</span>;<br>        InsertBefore(&amp;list3,EndPosition(list3),x);<br>        num++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(len1&lt;=num)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=num;i&lt;len2;i++)&#123;<br>            <span class="hljs-keyword">int</span> x=list2.pDatas[num]+up;<br>            up=x/<span class="hljs-number">10</span>;<br>            x%=<span class="hljs-number">10</span>;<br>            InsertBefore(&amp;list3,EndPosition(list3),x);<br>            num++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(len2&lt;=num)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=num;i&lt;len1;i++)&#123;<br>            <span class="hljs-keyword">int</span> x=list1.pDatas[num]+up;<br>            up=x/<span class="hljs-number">10</span>;<br>            x%=<span class="hljs-number">10</span>;<br>            InsertBefore(&amp;list3,EndPosition(list3),x);<br>            num++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(up!=<span class="hljs-number">0</span>)&#123;<br>        InsertBefore(&amp;list3,EndPosition(list3),up);<br>    &#125;<br>    <span class="hljs-keyword">return</span> list3;<br>&#125;<br><span class="hljs-function">struct SeqList <span class="hljs-title">subTwoNumbers</span><span class="hljs-params">(struct SeqList list1,struct SeqList list2)</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SeqList</span> <span class="hljs-title">list3</span>=</span>Create(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">int</span> len1=Length(list1);<br>    <span class="hljs-keyword">int</span> len2=Length(list2);<br>    <span class="hljs-keyword">int</span> back=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> num=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(len1&gt;num&amp;&amp;len2&gt;num)&#123;<br>        <span class="hljs-keyword">int</span> x=list1.pDatas[num]-list2.pDatas[num]-back;<br>        back=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">0</span>)&#123;<br>            x+=<span class="hljs-number">10</span>;<br>            back++;<br>        &#125;<br>        InsertBefore(&amp;list3,EndPosition(list3),x);<br>        num++;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(len1&gt;num)&#123;<br>        <span class="hljs-keyword">int</span> x=list1.pDatas[num]-back;<br>        back=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">0</span>)&#123;<br>            x+=<span class="hljs-number">10</span>;<br>            back++;<br>        &#125;<br>        InsertBefore(&amp;list3,EndPosition(list3),x);<br>        num++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> list3;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compareTwoNumbers</span><span class="hljs-params">(struct SeqList list1,struct SeqList list2)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(Length(list1)&gt;Length(list2))<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(Length(list1)&lt;Length(list2))<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    Position pos1 = EndPosition(list1)<span class="hljs-number">-1</span>;<br>    Position pos2 = EndPosition(list2)<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">int</span> flag=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (pos1 != BeginPosition(list1)<span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">if</span>(GetElem(list1,pos1)&gt;GetElem(list2,pos2))<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(GetElem(list1,pos1)&lt;GetElem(list2,pos2))<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span>&#123;<br>            pos1=LastPosition(list1,pos1);<br>            pos2=LastPosition(list2,pos2);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function">struct SeqList <span class="hljs-title">add</span><span class="hljs-params">(struct SeqList list1,struct SeqList list2)</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SeqList</span> <span class="hljs-title">list3</span>;</span><br>    <span class="hljs-keyword">if</span>(list1.sign==list2.sign)&#123;<br>        list3=addTwoNumbers(list1,list2);<br>        list3.sign=list1.sign;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(compareTwoNumbers(list1,list2)==<span class="hljs-number">1</span>)&#123;<br>            list3=subTwoNumbers(list1,list2);<br>            list3.sign=list1.sign;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            list3=subTwoNumbers(list2,list1);<br>            list3.sign=list2.sign;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> list3;<br>&#125;<br><span class="hljs-function">struct SeqList <span class="hljs-title">sub</span><span class="hljs-params">(struct SeqList list1,struct SeqList list2)</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SeqList</span> <span class="hljs-title">list3</span>;</span><br>    <span class="hljs-keyword">if</span>(list2.sign==<span class="hljs-number">1</span>)&#123;<br>        list2.sign=<span class="hljs-number">0</span>;<br>        list3=add(list1,list2);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        list2.sign=<span class="hljs-number">1</span>;<br>        list3=add(list1,list2);<br>    &#125;<br>    <span class="hljs-keyword">return</span> list3;<br>&#125;<br></code></pre></td></tr></table></figure> </details></li><li><p>编写程序，选用顺序存储结构或链式存储结构实现抽象数据类型栈和队列，再利用栈和队列，输入若干个整数，将输入后的正整数和负整数分别保存起来，输入完成后，首先将以输入相反的次序输出所有保存的正整数，再以输入相同次序输出所有保存的负整数，正整数和负整数输出各占一行。（10分）</p><details><summary>Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> ElemType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    ElemType *base;<br>    ElemType *top;<br>    <span class="hljs-keyword">int</span> stackSize;<br>&#125;sqStack;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STACK_INIT_SIZE 100</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initStack</span><span class="hljs-params">(sqStack *s)</span></span><br><span class="hljs-function"></span>&#123;<br>    s-&gt;base = (ElemType *)<span class="hljs-built_in">malloc</span>( STACK_INIT_SIZE * <span class="hljs-keyword">sizeof</span>(ElemType) );<br>    <span class="hljs-keyword">if</span>( !s-&gt;base )<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    s-&gt;top = s-&gt;base;   <span class="hljs-comment">// 最开始，栈顶就是栈底</span><br>    s-&gt;stackSize = STACK_INIT_SIZE;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STACKINCREMENT 10</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Empty</span><span class="hljs-params">(sqStack *s)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(s-&gt;top==s-&gt;base)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Push</span><span class="hljs-params">(sqStack *s, ElemType e)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 如果栈满，追加空间</span><br>    <span class="hljs-keyword">if</span>( s-&gt;top-s-&gt;base &gt;= s-&gt;stackSize )<br>    &#123;<br>        s-&gt;base = (ElemType *)<span class="hljs-built_in">realloc</span>(s-&gt;base, (s-&gt;stackSize + STACKINCREMENT) * <span class="hljs-keyword">sizeof</span>(ElemType));<br>        <span class="hljs-keyword">if</span>( !s-&gt;base )<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><br>        s-&gt;top = s-&gt;base + s-&gt;stackSize;              <span class="hljs-comment">// 设置栈顶</span><br>        s-&gt;stackSize = s-&gt;stackSize + STACKINCREMENT; <span class="hljs-comment">// 设置栈的最大容量</span><br>    &#125;<br><br>    *(s-&gt;top) = e;<br>    s-&gt;top++;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Pop</span><span class="hljs-params">(sqStack *s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>( s-&gt;top == s-&gt;base )&#123;  <span class="hljs-comment">// 栈已空</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> e = *--(s-&gt;top);<br>    <span class="hljs-keyword">return</span> e;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ClearStack</span><span class="hljs-params">(sqStack *s)</span></span>&#123;<br>    s-&gt;top = s-&gt;base;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DestroyStack</span><span class="hljs-params">(sqStack *s)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i, len;<br>    len = s-&gt;stackSize;<br>    <span class="hljs-keyword">for</span>( i=<span class="hljs-number">0</span>; i &lt; len; i++ )&#123;<br>        <span class="hljs-built_in">free</span>( s-&gt;base );<br>        s-&gt;base++;<br>    &#125;<br>    s-&gt;base = s-&gt;top = <span class="hljs-literal">NULL</span>;<br>    s-&gt;stackSize = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span></span><br><span class="hljs-class">&#123;</span><br>    ElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">next</span>;</span><br>&#125;Node;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    Node *front;<br>    Node *rear;<br>&#125;LinkQueue;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Status;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ERROR 0</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TRUE 1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FALSE 0</span><br><span class="hljs-function">Status <span class="hljs-title">InitQueue</span><span class="hljs-params">(LinkQueue *q)</span></span><br><span class="hljs-function"></span>&#123;<br>    q-&gt;front = <span class="hljs-literal">NULL</span>;<br>    q-&gt;rear = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<span class="hljs-comment">//InitQueue</span><br><br><span class="hljs-function">Status <span class="hljs-title">DestroyQueue</span><span class="hljs-params">(LinkQueue *q)</span></span><br><span class="hljs-function"></span>&#123;<br>    Node *p = q-&gt;front;<br>    <span class="hljs-keyword">while</span>(p)<br>    &#123;<br>        q-&gt;front = p-&gt;next;<br>        <span class="hljs-built_in">free</span>(p);<br>        p = q-&gt;front;<br>    &#125;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">(LinkQueue *q)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(q-&gt;front ==<span class="hljs-literal">NULL</span> &amp;&amp; q-&gt;rear == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> TRUE;<br>    <span class="hljs-keyword">return</span> FALSE;<br>&#125;<span class="hljs-comment">//isEmpty</span><br><br><span class="hljs-function">Status <span class="hljs-title">PushQueue</span><span class="hljs-params">(LinkQueue *q, ElemType e)</span></span><br><span class="hljs-function"></span>&#123;<br>    Node *p = (Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>    <span class="hljs-keyword">if</span>(!p)<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;存储空间分配失败!&quot;</span>);<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    p-&gt;data = e;<br>    p-&gt;next = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//防止出现野指针</span><br>    <span class="hljs-keyword">if</span>(isEmpty(q))<span class="hljs-comment">//如果是空队列，则front指向p（第一个元素）</span><br>            q-&gt;front = p;<br>    <span class="hljs-keyword">else</span><br>        q-&gt;rear-&gt;next = p;<br>        q-&gt;rear = p;<span class="hljs-comment">//q-&gt;rear指向队尾</span><br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<span class="hljs-comment">//Push</span><br><br><span class="hljs-function">Status <span class="hljs-title">PopQueue</span><span class="hljs-params">(LinkQueue *q)</span></span><br><span class="hljs-function"></span>&#123;<br>    Node *p = q-&gt;front;<br>    <span class="hljs-keyword">if</span>(isEmpty(q))<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;队列为空！&quot;</span>);<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">int</span> e = p-&gt;data;<br>    q-&gt;front = p-&gt;next;<br>    <span class="hljs-built_in">free</span>(p);<br>    <span class="hljs-keyword">if</span>(q-&gt;front == <span class="hljs-literal">NULL</span>)<span class="hljs-comment">//如果出队列后队列空了，则q-&gt;rear应指向NULL，</span><br>        q-&gt;rear = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> e;<br>&#125;<span class="hljs-comment">//Pop</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    sqStack s;<br>    initStack(&amp;s); <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入您要输入的正整数数量：&quot;</span>);<br>    <span class="hljs-keyword">int</span> n;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入正整数：&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">int</span> x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>        Push(&amp;s,x);<br>    &#125;<br>    LinkQueue e;<br>    InitQueue(&amp;e);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入您要输入的负整数数量：&quot;</span>);<br>    <span class="hljs-keyword">int</span> m;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;m);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入负整数：&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        <span class="hljs-keyword">int</span> x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>        PushQueue(&amp;e,x);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;以相反的次序输出正整数：&quot;</span>);<br>    <span class="hljs-keyword">while</span>(!Empty(&amp;s))&#123;<br>        <span class="hljs-keyword">int</span> x;<br>        x=Pop(&amp;s);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,x);<br>    &#125;<br>    <span class="hljs-comment">//DestroyStack(&amp;s);</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;以相同次序输出负整数：&quot;</span>);<br>    <span class="hljs-keyword">while</span>(!isEmpty(&amp;e))&#123;<br>        <span class="hljs-keyword">int</span> x;<br>        x=PopQueue(&amp;e);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,x);<br>    &#125;<br>    <span class="hljs-comment">//DestroyQueue(&amp;e);</span><br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></details></li></ol><h3 id="排序算法"><a class="markdownIt-Anchor" href="#排序算法"></a> 排序算法</h3><details><summary>Code</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> maxs=<span class="hljs-number">5e6</span>;<span class="hljs-comment">//设置5e6微秒即5秒为超时时间</span><br><span class="hljs-comment">//用于计算排序运行时间的时间类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">stop_watch</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    stop_watch()<br>        : elapsed_(<span class="hljs-number">0</span>)<br>    &#123;<br>        QueryPerformanceFrequency(&amp;freq_);<br>    &#125;<br>    ~stop_watch()&#123;&#125;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">start</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        QueryPerformanceCounter(&amp;begin_time_);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">stop</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        LARGE_INTEGER end_time;<br>        QueryPerformanceCounter(&amp;end_time);<br>        elapsed_ += (end_time.QuadPart - begin_time_.QuadPart) * <span class="hljs-number">1000000</span> / freq_.QuadPart;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">restart</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        elapsed_ = <span class="hljs-number">0</span>;<br>        start();<br>    &#125;<br>    <span class="hljs-comment">//微秒</span><br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">elapsed</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">static_cast</span>&lt;<span class="hljs-keyword">double</span>&gt;(elapsed_);<br>    &#125;<br>    <span class="hljs-comment">//毫秒</span><br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">elapsed_ms</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> elapsed_ / <span class="hljs-number">1000.0</span>;<br>    &#125;<br>    <span class="hljs-comment">//秒</span><br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">elapsed_second</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> elapsed_ / <span class="hljs-number">1000000.0</span>;<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    LARGE_INTEGER freq_;<br>    LARGE_INTEGER begin_time_;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> elapsed_;<br>&#125;;<br>stop_watch watch;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">timecontinue</span><span class="hljs-params">()</span></span>&#123;<br>watch.start();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">timebegin</span><span class="hljs-params">()</span></span>&#123;<br>watch.restart();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">timeEnd</span><span class="hljs-params">()</span></span>&#123;<br>watch.stop();<br>&#125;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;a1,a2,a3,a4,a5;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;x;<br><br><span class="hljs-comment">//排序结果检测函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;a)</span></span>&#123;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;b=a;<br>sort(a.begin(),a.end());<br><span class="hljs-built_in">cout</span>.width(<span class="hljs-number">20</span>);<br><span class="hljs-keyword">if</span>(a==b)<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;排序正确！&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;排序错误！&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-comment">//超时检测函数</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Overtime</span><span class="hljs-params">()</span></span>&#123;<br>timeEnd();<br><span class="hljs-keyword">if</span>(watch.elapsed()&gt;=maxs)&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;排序时间超过5秒&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>timecontinue();<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;a)</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x:a)<span class="hljs-built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">timePrint</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">double</span> nowTime=watch.elapsed();<br><span class="hljs-built_in">cout</span>.width(<span class="hljs-number">20</span>);<br><span class="hljs-keyword">if</span>(nowTime&lt;<span class="hljs-number">1000</span>)<span class="hljs-built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="hljs-number">2</span>)&lt;&lt;nowTime&lt;&lt;<span class="hljs-string">&quot; μs&quot;</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nowTime&lt;<span class="hljs-number">1e6</span>)<span class="hljs-built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="hljs-number">2</span>)&lt;&lt;nowTime/<span class="hljs-number">1000.0</span>&lt;&lt;<span class="hljs-string">&quot; ms&quot;</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="hljs-number">2</span>)&lt;&lt;nowTime/<span class="hljs-number">1000000.0</span>&lt;&lt;<span class="hljs-string">&quot; s &quot;</span>;<br><span class="hljs-comment">//cout&lt;&lt;watch.elapsed()&lt;&lt;&quot; ns&quot;&lt;&lt;endl;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">create</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp;x,<span class="hljs-keyword">int</span> num)</span></span>&#123;<br>srand((<span class="hljs-keyword">unsigned</span>)time(<span class="hljs-literal">NULL</span>));<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;num;i++)&#123;<br><span class="hljs-keyword">int</span> e=rand()%num;<br>x.push_back(e);<br>&#125;<br>&#125;<br><span class="hljs-comment">//冒泡排序</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BubbleSort</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;f)</span></span>&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;冒泡排序 &quot;</span>;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;a=f;<br>timebegin();<br><span class="hljs-keyword">int</span> len=a.size();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;len;i++)&#123;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ff</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span>;<br><span class="hljs-keyword">if</span>(Overtime())<span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;len-i;j++)&#123;<br><span class="hljs-keyword">if</span>(a[j]&gt;a[j+<span class="hljs-number">1</span>])&#123;<br>swap(a[j],a[j+<span class="hljs-number">1</span>]);<br>ff++;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(!ff)<span class="hljs-keyword">break</span>;<span class="hljs-comment">//剪枝</span><br>&#125;<br>timeEnd();<br>timePrint();<br>check(a);<br>&#125;<br><span class="hljs-comment">//插入排序</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InsertSort</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;f)</span></span>&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;插入排序 &quot;</span>;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;a=f;<br>timebegin();<br><span class="hljs-keyword">int</span> len=a.size();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;len;i++)&#123;<br><span class="hljs-keyword">if</span>(Overtime())<span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i;j&gt;<span class="hljs-number">0</span>;j--)&#123;<br>            <span class="hljs-keyword">if</span>(a[j]&lt;a[j<span class="hljs-number">-1</span>])swap(a[j],a[j<span class="hljs-number">-1</span>]);<br>&#125;<br>&#125;<br>timeEnd();<br>timePrint();<br>check(a);<br>&#125;<br><span class="hljs-comment">//选择排序</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SelectSort</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;f)</span></span>&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;选择排序 &quot;</span>;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;a=f;<br>timebegin();<br><span class="hljs-keyword">int</span> len=a.size();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;++i)&#123;<br>        <span class="hljs-keyword">int</span> mins=i;<br><span class="hljs-keyword">if</span>(Overtime())<span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i+<span class="hljs-number">1</span>;j&lt;len;++j)&#123;<br><span class="hljs-keyword">if</span>(a[j]&lt;a[mins])mins=j;<br>&#125;<br>        swap(a[i],a[mins]);<br>    &#125;<br>timeEnd();<br>timePrint();<br>check(a);<br>&#125;<br><span class="hljs-comment">//归并排序</span><br><span class="hljs-keyword">int</span> tmp[<span class="hljs-number">1000005</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Merge</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp;a,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>timebegin();<br>    <span class="hljs-keyword">if</span>(l&gt;=r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    Merge(a,l,mid);<br>    Merge(a,mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-keyword">int</span> i=l,j=mid+<span class="hljs-number">1</span>,tlen=l;<br>    <span class="hljs-keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)&#123;<br>        <span class="hljs-keyword">if</span>(a[i]&lt;=a[j]) tmp[tlen++]=a[i++];<br>        <span class="hljs-keyword">else</span> tmp[tlen++]=a[j++];<br>    &#125;<br>    <span class="hljs-keyword">while</span>(i&lt;=mid) tmp[tlen++]=a[i++];<br>    <span class="hljs-keyword">while</span>(j&lt;=r) tmp[tlen++]=a[j++];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=l;i&lt;=r;++i) a[i]=tmp[i];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MergeSort</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;f)</span></span>&#123;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;a=f;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;归并排序 &quot;</span>;<br>Merge(a,<span class="hljs-number">0</span>,a.size()<span class="hljs-number">-1</span>);<br>timeEnd();<br>timePrint();<br>check(a);<br>&#125;<br><span class="hljs-comment">//快速排序</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">findmiddle</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> c)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> tmp=a^b^c;<br>    <span class="hljs-keyword">int</span> mx=max(&#123;a,b,c&#125;);<br>    <span class="hljs-keyword">int</span> mn=min(&#123;a,b,c&#125;);<br>    <span class="hljs-keyword">return</span> tmp^mx^mn;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">QuickSortAdjust</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp;a,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l&gt;=r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">int</span> pivot=findmiddle(a[l],a[r],a[l+r&gt;&gt;<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">int</span> i=l,j=r;<br>    <span class="hljs-keyword">while</span>(i&lt;=j)&#123;<br>        <span class="hljs-keyword">while</span>(i&lt;=j&amp;&amp;a[i]&lt;pivot) i++;<br>        <span class="hljs-keyword">while</span>(i&lt;=j&amp;&amp;a[j]&gt;pivot) j--;<br>        <span class="hljs-keyword">if</span>(i&lt;=j) swap(a[i++],a[j--]);<br>    &#125;<br>    QuickSortAdjust(a,l,j);<br>    QuickSortAdjust(a,i,r);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">QuickSort</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;f)</span></span>&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;快速排序 &quot;</span>;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;a=f;<br>timebegin();<br>QuickSortAdjust(a,<span class="hljs-number">0</span>,a.size()<span class="hljs-number">-1</span>);<br>timeEnd();<br>timePrint();<br>check(a);<br>&#125;<br><span class="hljs-comment">//堆排序</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">HeapAdjust</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp;a,<span class="hljs-keyword">int</span> len)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=len<span class="hljs-number">-1</span>;i&gt;<span class="hljs-number">0</span>;--i)&#123;<br>        <span class="hljs-keyword">if</span>((i&amp;<span class="hljs-number">1</span>)&amp;&amp;(a[i]&gt;a[i/<span class="hljs-number">2</span>])) <br>            swap(a[i],a[i/<span class="hljs-number">2</span>]);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!(i&amp;<span class="hljs-number">1</span>)&amp;&amp;(a[i]&gt;a[i/<span class="hljs-number">2</span><span class="hljs-number">-1</span>])) <br>            swap(a[i],a[i/<span class="hljs-number">2</span><span class="hljs-number">-1</span>]);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">HeapSort</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;f,<span class="hljs-keyword">int</span> len)</span></span>&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;堆排序   &quot;</span>;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;a=f;<br>timebegin();<br>    <span class="hljs-keyword">while</span>(len)&#123;<br><span class="hljs-keyword">if</span>(Overtime())<span class="hljs-keyword">return</span>;<br>        HeapAdjust(a,len--);<br>        swap(a[<span class="hljs-number">0</span>],a[len]);<br>    &#125;<br>timeEnd();<br>timePrint();<br>check(a);<br>&#125;<br><span class="hljs-comment">//桶排序</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BucketSort</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;f,<span class="hljs-keyword">int</span> num)</span></span>&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;桶排序   &quot;</span>;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;a=f;<br>timebegin();<br><span class="hljs-keyword">int</span> len=a.size();<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;vis(num);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;++i)&#123;<br>        vis[a[i]]++;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">cnt</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;num;++i)&#123;<br>        <span class="hljs-keyword">while</span>(vis[i]) vis[i]--,a[cnt++]=i;<br>    &#125;<br>timeEnd();<br>timePrint();<br>check(a);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">stlsort</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;f)</span></span>&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;stl-sort &quot;</span>;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;a=f;<br>timebegin();<br>sort(a.begin(),a.end());<br>timeEnd();<br>timePrint();<br>check(a);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">beginSort</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;f,<span class="hljs-keyword">int</span> num)</span></span>&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;开始对规模为 &quot;</span>&lt;&lt;num&lt;&lt;<span class="hljs-string">&quot; 的模拟数组进行排序测试&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>BubbleSort(f);<br>InsertSort(f);<br>SelectSort(f);<br>MergeSort(f);<br>QuickSort(f);<br>HeapSort(f,f.size());<br>BucketSort(f,num);<br>stlsort(f);<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>create(a1,<span class="hljs-number">100</span>);<br>create(a2,<span class="hljs-number">1000</span>);<br>create(a3,<span class="hljs-number">10000</span>);<br>create(a4,<span class="hljs-number">100000</span>);<br>create(a5,<span class="hljs-number">1000000</span>);<br>beginSort(a1,<span class="hljs-number">100</span>);<br>beginSort(a2,<span class="hljs-number">1000</span>);<br>beginSort(a3,<span class="hljs-number">10000</span>);<br>beginSort(a4,<span class="hljs-number">100000</span>);<br>beginSort(a5,<span class="hljs-number">1000000</span>);<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></details>]]></content>
    
    
    <categories>
      
      <category>答案</category>
      
    </categories>
    
    
    <tags>
      
      <tag>answer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>codeforces小tip</title>
    <link href="/2021/03/14/cf-notice/"/>
    <url>/2021/03/14/cf-notice/</url>
    
    <content type="html"><![CDATA[<ul><li>如果碰到一道题，数据比较大，已知的算法肯定会超时间复杂度，比如n为2e5，明显只能用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">nlogn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span></span></span></span>的做法，而已知只能用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>的做法，注意一下数据范围，想一想能不能根据<strong>抽屉原理</strong>直接暴力求解而不会超时。</li></ul>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库答案</title>
    <link href="/2021/03/14/shujuku/"/>
    <url>/2021/03/14/shujuku/</url>
    
    <content type="html"><![CDATA[<p><strong>浙江省高等学校在线开放课程共享平台</strong></p><a id="more"></a><h3 id="第一章测验"><a class="markdownIt-Anchor" href="#第一章测验"></a> 第一章测验</h3><p>1.单选题(共20题)</p><ol><li>在下面给出的内容中,不属于DBA职责的是( )。<br />A.定义概念模式<br />B.修改模式结构<br />C.编写应用程序<br />D.编写完整性规则<br />我的答案: <strong>C</strong></li><li>数据库管理系统是(  )。<br />A.操作系统的一部分<br />B.一种编译程序<br />C.在操作系统支持下的系统软件<br />D.一种操作系统<br />我的答案: <strong>C</strong></li><li>定义了物理存储中数据是怎样和在哪里组织的模式是(       )<br />A.外模式<br />B.内模式<br />C.模式<br />D.以上都不是<br />我的答案: <strong>B</strong></li><li>为特定用户定义一个或多个数据库视图的是(       )。<br />A.模式<br />B.内模式<br />C.外模式<br />D.以上都不是<br />我的答案: <strong>C</strong></li><li>下列说法中错误的是( )。<br />A.数据是信息的符号表示,因此,同一信息只能用一种数据形式来表示<br />B.信息是数据的内涵,是对数据的语义解释<br />C.数据管理是数据处理中的核心环节,其优劣直接影响数据处理的效果<br />D.只有当给数据赋予特定语义后,数据才可转换为可传递的信息<br />我的答案: <strong>A</strong></li><li>以下说法中正确的是( )。<br />A.DBMS是处于计算机硬件和操作系统之间的可直接对数据库进行操作的一个软件系统<br />B.DBMS能实现数据库的安全性控制、完整性控制、并发控制及数据库恢复等运行管理功能<br />C.DBMS包含DB和DBS<br />D.DBMS提供数据控制语言(DCL),能实现对数据库中数据的查询、插入、修改和删除等操作<br />我的答案: <strong>B</strong></li><li>下列说法中正确的是( )。<br />A.在三级模式间引入二级映像的主要作用是提高数据与程序的安全性<br />B.对一个数据库系统来说,实际存在的只有物理级数据库<br />C.数据的存储结构与数据逻辑结构之间的独立性称为数据的逻辑独立性<br />D.在数据库系统的三级模式结构中,内模式描述了数据库中全体数据的全局逻辑结构和特征<br />我的答案: <strong>B</strong></li><li>数据库系统的体系结构是( )。<br />A.两级模式结构和一级映象<br />B.三级模式结构和一级映象<br />C.三级模式结构和两级映象<br />D.三级模式结构和三级映象<br />我的答案: <strong>C</strong></li><li>描述数据库中全体数据的逻辑结构和特征是( )。<br />A.内模式<br />B.模式<br />C.外模式<br />D.存储模式<br />我的答案: <strong>B</strong></li><li>(  )是位于用户与操作系统之间的专门数据管理软件。<br />A.数据库管理系统<br />B.数据库系统<br />C.数据库<br />D.数据库应用系统<br />我的答案: <strong>A</strong></li><li>内模式的改变不会影响到(外)模式,这称为(       )。<br />A.物理独立性<br />B.逻辑独立性<br />C.内部独立性<br />D.外部独立性<br />我的答案: <strong>A</strong></li><li>下列关于数据库三级模式结构的说法中,哪一个是不正确的? ( )<br />A.数据库三级模式结构由内模式、模式和外模式组成<br />B.DBMS 在数据库三级模式之间提供外模式/模式映象和模式/内模式映像<br />C.外模式/模式映象实现数据的逻辑独立性<br />D.一个数据库可以有多个模式<br />我的答案: <strong>D</strong></li><li>下列说法中错误的是( )。<br />A.外模式是用户视图,是概念模式的某一部分的抽象表示<br />B.在数据库系统中,外模式可有多个,而模式、内模式只能各有一个<br />C.一个数据库系统中,外模式/模式映像只能有一个<br />D.在数据库系统中,外模式/模式映像保证了数据与应用程序间的逻辑独立性<br />我的答案: <strong>C</strong></li><li>数据库系统的核心是(  )。<br />A.数据库<br />B.数据库管理系统<br />C.数据模型<br />D.软件工具<br />我的答案: <strong>B</strong></li><li>数据库中存储的是()。<br />A.数据<br />B.数据模型<br />C.数据以及数据之间的联系<br />D.实体<br />我的答案: <strong>C</strong></li><li>数据库DB、数据库系统DBS、数据库管理系统DBMS三者之间的关系是（ ）。<br />A.DBS包括DB、DBMS<br />B.DB包括DBS、DBMS<br />C.DBMS包括DB、DBS<br />D.DB就是DBS，也是DBMS<br />我的答案: <strong>A</strong></li><li>数据库系统是采用了数据库技术的计算机系统，数据库系统由数据库、数据库管理系统、应用系统和（  ）构成。<br />A.系统分析员<br />B.程序员<br />C.数据库管理员<br />D.操作员<br />我的答案: <strong>C</strong></li><li>下面列出的条目中，不属于数据库技术的主要特点（  ）。<br />A.数据的结构化<br />B.数据的冗余度小<br />C.较高的数据独立性<br />D.程序的标准化<br />我的答案: <strong>D</strong></li><li>在数据库中产生数据不一致的根本原因是（  ）。<br />A.数据存储量太大<br />B.未对数据进行完整性控制<br />C.没有严格保护数据<br />D.数据冗余<br />我的答案: <strong>D</strong></li><li>在数据库中，下列说法不正确的是（  ）。<br />A.数据库避免了一切数据重复<br />B.数据库减少了数据冗余<br />C.数据库中的数据可以共享<br />D.若系统是完全可以控制的，则系统可确保更新的一致性<br />我的答案: <strong>A</strong></li></ol>]]></content>
    
    
    <categories>
      
      <category>答案</category>
      
    </categories>
    
    
    <tags>
      
      <tag>answer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目收藏</title>
    <link href="/2021/03/06/favorite/"/>
    <url>/2021/03/06/favorite/</url>
    
    <content type="html"><![CDATA[<h3 id="c"><a class="markdownIt-Anchor" href="#c"></a> C++</h3><p>Facebook的开源基础库Folly <a class="btn" href="https://github.com/facebook/folly"  title="链接" target="_blank">链接</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>favorite</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Educational Codeforces Round 104 (Rated for Div. 2)</title>
    <link href="/2021/02/16/cf-edu104/"/>
    <url>/2021/02/16/cf-edu104/</url>
    
    <content type="html"><![CDATA[<h2 id="a-arena"><a class="markdownIt-Anchor" href="#a-arena"></a> A. Arena</h2><a class="btn" href="https://codeforces.com/contest/1487/problem/A"  title="A" target="_blank">链接</a><p><strong>题意</strong>：</p><p>有一堆人打架，两个人打架战斗力强的赢，相等则平手。</p><p>问每次随机挑一对人打架，有多少人可能一直赢。</p><p><strong>思路</strong>： <span class="label label-primary">模拟</span></p><p>拿所有和最弱的比即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> a[<span class="hljs-number">105</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> t;<span class="hljs-built_in">cin</span>&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        <span class="hljs-keyword">int</span> n;<span class="hljs-built_in">cin</span>&gt;&gt;n;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>        sort(a+<span class="hljs-number">1</span>,a+n+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            <span class="hljs-keyword">if</span>(a[i]!=a[<span class="hljs-number">1</span>])ans++;<br>        &#125;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="b-cat-cycle"><a class="markdownIt-Anchor" href="#b-cat-cycle"></a> B. Cat Cycle</h2><a class="btn" href="https://codeforces.com/contest/1487/problem/B"  title="B" target="_blank">链接</a> <p><strong>题意</strong>：</p><ul><li>有两只猫要睡觉，A猫第一天睡n号点，顺序为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mi>n</mi><mi mathvariant="normal">−</mi><mn>1</mn><mo separator="true">,</mo><mi>n</mi><mi mathvariant="normal">−</mi><mn>2</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mi>n</mi><mo separator="true">,</mo><mi>n</mi><mi mathvariant="normal">−</mi><mn>1</mn><mo separator="true">,</mo><mo>…</mo></mrow><annotation encoding="application/x-tex">n,n−1,n−2,…,3,2,1,n,n−1,…</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mord">−</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span></span></span></span></li><li>B猫从1号点开始往后睡，顺序为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>n</mi><mi mathvariant="normal">−</mi><mn>1</mn><mo separator="true">,</mo><mi>n</mi><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>…</mo></mrow><annotation encoding="application/x-tex">1,2,3,…,n−1,n,1,2,…</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span></span></span></span>如果B猫和A猫下一天会到同一个地方睡觉，则B猫会跳过那个位置，到下一天的位置睡。<br />问第k天B猫睡在哪里。</li></ul><p><strong>思路</strong>：<span class="label label-primary">模拟</span></p><ul><li>n是偶数，不会产生冲突，直接k对n取模即可。</li><li>n是奇数，有冲突，两只猫走<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">n/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span></span></span></span>格之后就会撞到，然后B猫多走一步。然后AB猫变成背对背相邻了，所以一共撞到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">k/(n/2))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">/</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>次，即多走这么多步，加上取模即可。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> t;<span class="hljs-built_in">cin</span>&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        <span class="hljs-keyword">int</span> n,k;<span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;k;<br>        <span class="hljs-keyword">if</span>(n%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">cout</span>&lt;&lt;(k<span class="hljs-number">-1</span>)%n+<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            k--;<br>            k+=k/(n/<span class="hljs-number">2</span>);<br>            k=k%n+<span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">cout</span>&lt;&lt;k&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="c-minimum-ties"><a class="markdownIt-Anchor" href="#c-minimum-ties"></a> C. Minimum Ties</h2><a class="btn" href="https://codeforces.com/contest/1487/problem/C"  title="C" target="_blank">链接</a> <p><strong>题意</strong>：</p><p>n个组球队踢球，赢了加3分，输了不加分，平局各加一分。</p><p>构造一种比赛状况使得最后总分一样的前提下平局最少。</p><p><strong>思路</strong>：<span class="label label-primary">构造</span></p><p>一共要踢<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">n*(n-1)/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/</span><span class="mord">2</span></span></span></span>场比赛，产生的总分<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>=</mo><mi>n</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn><mo>∗</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">m=n*(n-1)/2*3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span></p><p>为了使总分一样，那么所有队伍需要均分总分</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m%n==0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 可以均分，直接分配胜者和负者</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m%n!=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 不能均分，每次产生一场平局总分+2分，即把一场非平局转化为平局会使总分-1，把总分减到能整除n即可</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> m(a) memset(a,0,sizeof(a))</span><br><span class="hljs-keyword">int</span> a[<span class="hljs-number">105</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> t;<span class="hljs-built_in">cin</span>&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>m(a);<br><span class="hljs-keyword">int</span> n;<span class="hljs-built_in">cin</span>&gt;&gt;n;<br><span class="hljs-keyword">int</span> m=(n*(n<span class="hljs-number">-1</span>))/<span class="hljs-number">2</span>*<span class="hljs-number">3</span>;<span class="hljs-comment">//产生的总分</span><br><span class="hljs-keyword">int</span> sheng=m/n;      <span class="hljs-comment">//每队的总分</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i+<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br><span class="hljs-keyword">if</span>(a[i]&lt;=sheng<span class="hljs-number">-3</span>)&#123;<br>a[i]+=<span class="hljs-number">3</span>;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i]==sheng)&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">-1</span>&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>a[j]+=<span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>a[i]++;<br>                    a[j]++;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">0</span>&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="d-pythagorean-triples"><a class="markdownIt-Anchor" href="#d-pythagorean-triples"></a> D. Pythagorean Triples</h2><a class="btn" href="https://codeforces.com/contest/1487/problem/D"  title="D" target="_blank">链接</a> <p><strong>题意</strong>：</p><p>找到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>a</mi><mo>≤</mo><mi>b</mi><mo>≤</mo><mi>c</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1≤a≤b≤c≤n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，使得<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mn>2</mn></msup><mo>=</mo><mi>b</mi><mo>+</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">a^2=b+c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span>，并且有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>c</mi><mn>2</mn></msup><mo>=</mo><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><msup><mi>b</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">c^2=a^2+b^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>的对数。</p><p><strong>思路</strong>：<span class="label label-primary">模拟</span></p><p>化简公式去掉<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">a^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>，解出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mo>=</mo><mi>b</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">c=b+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mn>2</mn></msup><mo>=</mo><mn>2</mn><mi>b</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">a^2=2b+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p><p>可以二分，也可以直接推公式<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，比赛时我用了直接暴力，并且没打表也不会tle</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> t;<span class="hljs-built_in">cin</span>&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        <span class="hljs-keyword">int</span> n;<span class="hljs-built_in">cin</span>&gt;&gt;n;<br>        <span class="hljs-keyword">int</span> x=<span class="hljs-keyword">int</span>(<span class="hljs-built_in">sqrt</span>(n))+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> a=<span class="hljs-number">1</span>;a&lt;=n;a++)&#123;<br>            <span class="hljs-keyword">if</span>((a*a)%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)<span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">int</span> b=(a*a<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(b&gt;n)<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">if</span>(b&lt;<span class="hljs-number">1</span>||b&gt;n)<span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">int</span> c=a*a-b;<br>            <span class="hljs-keyword">if</span>(c&lt;<span class="hljs-number">1</span>||c&gt;n)<span class="hljs-keyword">continue</span>;<br>            ans++;<br>        &#125;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="e-cheap-dinner"><a class="markdownIt-Anchor" href="#e-cheap-dinner"></a> E. Cheap Dinner</h2><a class="btn" href="https://codeforces.com/contest/1487/problem/E"  title="E" target="_blank">链接</a><p><strong>题意</strong>：</p><p>给4个集合n1,n2,n3,n4</p><p>n1和n2，n2和n3，n3和n4之间有一些限制（两个里只能取其中一个）</p><p>四组每组恰好取一个，求和的最小值</p><p><strong>思路</strong>： <span class="label label-primary">暴力</span> <span class="label label-primary">贪心</span></p><p>其他题解都是用线段树和st表，实际上排序加暴力贪心取也可以过</p><ul><li><p>把n4从小到大排序，由n3和n4的关系推出每个n3对应的最佳的n4</p></li><li><p>把加上n4的n3从小到大排序，由n2和n3的关系推出每个n2对应的最佳的n3</p></li><li><p>把加上n3的n2从小到大排序，由n3和n4的关系推出每个n1对应的最佳的n2</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> id,num;<br>&#125;;<br>node a[<span class="hljs-number">150005</span>],b[<span class="hljs-number">150005</span>],c[<span class="hljs-number">150005</span>],d[<span class="hljs-number">150005</span>];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(node a,node b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a.num&lt;b.num;<br>&#125;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt;&gt;m(<span class="hljs-number">5</span>);<span class="hljs-comment">//开一个二维set，存每个集合的每个数的限制条件</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::sync_with_stdio(<span class="hljs-literal">false</span>);<span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">int</span> n1,n2,n3,n4;<span class="hljs-built_in">cin</span>&gt;&gt;n1&gt;&gt;n2&gt;&gt;n3&gt;&gt;n4;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n1;i++)<span class="hljs-built_in">cin</span>&gt;&gt;a[i].num,a[i].id=i;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n2;i++)<span class="hljs-built_in">cin</span>&gt;&gt;b[i].num,b[i].id=i;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n3;i++)<span class="hljs-built_in">cin</span>&gt;&gt;c[i].num,c[i].id=i;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n4;i++)<span class="hljs-built_in">cin</span>&gt;&gt;d[i].num,d[i].id=i;<br>    <span class="hljs-keyword">int</span> m1;<span class="hljs-built_in">cin</span>&gt;&gt;m1;m[<span class="hljs-number">1</span>].resize(n1+<span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m1;i++)&#123;<br>        <span class="hljs-keyword">int</span> x,y;<span class="hljs-built_in">cin</span>&gt;&gt;x&gt;&gt;y;<br>        m[<span class="hljs-number">1</span>][x].insert(y);<br>    &#125;<br>    <span class="hljs-keyword">int</span> m2;<span class="hljs-built_in">cin</span>&gt;&gt;m2;m[<span class="hljs-number">2</span>].resize(n2+<span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m2;i++)&#123;<br>        <span class="hljs-keyword">int</span> x,y;<span class="hljs-built_in">cin</span>&gt;&gt;x&gt;&gt;y;<br>        m[<span class="hljs-number">2</span>][x].insert(y);<br>    &#125;<br>    <span class="hljs-keyword">int</span> m3;<span class="hljs-built_in">cin</span>&gt;&gt;m3;m[<span class="hljs-number">3</span>].resize(n3+<span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m3;i++)&#123;<br>        <span class="hljs-keyword">int</span> x,y;<span class="hljs-built_in">cin</span>&gt;&gt;x&gt;&gt;y;<br>        m[<span class="hljs-number">3</span>][x].insert(y);<br>    &#125;<br>    sort(d+<span class="hljs-number">1</span>,d+n4+<span class="hljs-number">1</span>,cmp);<span class="hljs-comment">//把n4按值从小到大排序</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n3;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n4;j++)&#123;<br>            <span class="hljs-keyword">if</span>(!m[<span class="hljs-number">3</span>][c[i].id].count(d[j].id))&#123;<span class="hljs-comment">//如果n3可以取当前的n4，直接取，因为当前的n4最小，必然是最优</span><br>                c[i].num+=d[j].num;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(j==n4)c[i].num=INF;<br>        &#125;<br>    &#125;<br>    sort(c+<span class="hljs-number">1</span>,c+n3+<span class="hljs-number">1</span>,cmp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n2;i++)&#123;<br>        <span class="hljs-keyword">if</span>(b[i].num==INF)<span class="hljs-keyword">break</span>;<span class="hljs-comment">//不加这个优化也可以过</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n3;j++)&#123;<br>            <span class="hljs-keyword">if</span>(!m[<span class="hljs-number">2</span>][b[i].id].count(c[j].id))&#123;<br>                b[i].num+=c[j].num;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(j==n3)b[i].num=INF;   <br>        &#125;<br>    &#125;<br>    sort(b+<span class="hljs-number">1</span>,b+n2+<span class="hljs-number">1</span>,cmp);<br>    <span class="hljs-keyword">int</span> mins=INF;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n1;i++)&#123;<br>        <span class="hljs-keyword">if</span>(a[i].num==INF)<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n2;j++)&#123;<br>            <span class="hljs-keyword">if</span>(!m[<span class="hljs-number">1</span>][a[i].id].count(b[j].id))&#123;<br>                a[i].num+=b[j].num;<br>                mins=min(mins,a[i].num);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;        <br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(mins==INF)<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span>&lt;&lt;mins;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大年二十九的海滨公园</title>
    <link href="/2021/02/13/20210210haibingongyuan/"/>
    <url>/2021/02/13/20210210haibingongyuan/</url>
    
    <content type="html"><![CDATA[<h3 id="时间"><a class="markdownIt-Anchor" href="#时间"></a> 时间</h3><p><strong>2021.02.10</strong></p><h3 id="地点"><a class="markdownIt-Anchor" href="#地点"></a> 地点</h3><p><strong>定海海滨公园</strong></p><a id="more"></a><p>想着大年三十会下雨，以及吃完年夜饭估计就慵懒地躺到床上抢各种红包，于是在前一天就动身去寻找人间的烟火气。</p><center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC06228.jpg" width="50%" height="50%" /></center><center>最先看到的放烟花的小姐姐</center>&nbsp<center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC06247.jpg" width="50%" height="50%" /></center>&nbsp<center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC06251.jpg" width="50%" height="50%" /></center><center>路灯照向烟，形成冷暖对比的画面</center>&nbsp<center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC06281.jpg" width="50%" height="50%" /></center>&nbsp<center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC06282.jpg" width="50%" height="50%" /></center>&nbsp<center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC06312.jpg" width="50%" height="50%" /></center><center>很神奇的随手延时</center>&nbsp<center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC06306.jpg" width="50%" height="50%" /></center>&nbsp<center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC06325.jpg" width="50%" height="50%" /></center><center>一群人聚在一起很有感觉</center>&nbsp<center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC06330.jpg" width="50%" height="50%" /></center>&nbsp<center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC06293.jpg" width="50%" height="50%" /></center>&nbsp<center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/IMG_1206.jpg" width="50%" height="50%" /></center><center>炫耀拍的延时，有点像一朵花</center>&nbsp]]></content>
    
    
    <categories>
      
      <category>摄影</category>
      
    </categories>
    
    
    <tags>
      
      <tag>photo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces Round 701 (Div. 2)</title>
    <link href="/2021/02/12/cf-701/"/>
    <url>/2021/02/12/cf-701/</url>
    
    <content type="html"><![CDATA[<h2 id="a-add-and-divide"><a class="markdownIt-Anchor" href="#a-add-and-divide"></a> A. Add and Divide</h2><a class="btn" href="https://codeforces.com/contest/1485/problem/A"  title="A" target="_blank">链接</a> <span class="label label-primary">模拟</span><p>b最多加的次数在10次以内</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> t;<span class="hljs-built_in">cin</span>&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        <span class="hljs-keyword">int</span> a,b;<span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b;<br>        <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(b==<span class="hljs-number">1</span>)&#123;<br>            sum=<span class="hljs-number">1</span>;b++;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mins=INF;<br>        <span class="hljs-keyword">int</span> flag=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=b;;i++)&#123;<br>            flag++;<br>            <span class="hljs-keyword">if</span>(flag&gt;<span class="hljs-number">10</span>)<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">int</span> s=a;<br>            <span class="hljs-keyword">int</span> ans=sum+i-b;<br>            <span class="hljs-keyword">while</span>(s&gt;<span class="hljs-number">0</span>)&#123;<br>                ans++;<br>                s/=i;<br>            &#125;<br>            mins=min(mins,ans);<br>        &#125;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;mins&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="b-replace-and-keep-sorted"><a class="markdownIt-Anchor" href="#b-replace-and-keep-sorted"></a> B. Replace and Keep Sorted</h2><a class="btn" href="https://codeforces.com/contest/1485/problem/B"  title="B" target="_blank">链接</a> <span class="label label-primary">模拟</span><p>区间左边加区间右边</p><p>区间中间的算两遍所以乘2</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> a[<span class="hljs-number">100005</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n,q,k;<span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;q&gt;&gt;k;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br><span class="hljs-keyword">while</span>(q--)&#123;<br><span class="hljs-keyword">int</span> l,r;<span class="hljs-built_in">cin</span>&gt;&gt;l&gt;&gt;r;<br><span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>ans+=a[l]<span class="hljs-number">-1</span>;<br>ans+=k-a[r];<br>ans+=<span class="hljs-number">2</span>*(a[r]-a[l]<span class="hljs-number">-1</span>-r+l+<span class="hljs-number">1</span>);<br><span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;   <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="c-floor-and-mod"><a class="markdownIt-Anchor" href="#c-floor-and-mod"></a> C. Floor and Mod</h2><a class="btn" href="https://codeforces.com/contest/1485/problem/C"  title="C" target="_blank">链接</a> <span class="label label-primary">模拟</span><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mi>r</mi><mo>∗</mo><mi>y</mi><mo>+</mo><mi>r</mi></mrow><annotation encoding="application/x-tex">x=r*y+r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>r</mi><mo>&lt;</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(r&lt;y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span></p><p>所以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>&lt;</mo><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mi>y</mi><mo>+</mo><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x&lt;(y-1)*y+(y-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p><p>即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>&lt;</mo><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><mi>y</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x&lt;(y-1)*(y+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p><p>枚举r即可把复杂度缩小到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msqrt><mi>n</mi></msqrt><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\sqrt{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.05028em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> t;<span class="hljs-built_in">cin</span>&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        ll x,y;<span class="hljs-built_in">cin</span>&gt;&gt;x&gt;&gt;y;<br>        ll sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=min(<span class="hljs-number">100000l</span>l,y<span class="hljs-number">-1</span>);i++)&#123;<br>            sum+=max(min(y<span class="hljs-number">-1</span>,min((x/i),y+<span class="hljs-number">1l</span>l)-(i+<span class="hljs-number">1</span>)),<span class="hljs-number">0l</span>l);<br>        &#125;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="d-multiples-and-power-differences"><a class="markdownIt-Anchor" href="#d-multiples-and-power-differences"></a> D. Multiples and Power Differences</h2><a class="btn" href="https://codeforces.com/contest/1485/problem/D"  title="D" target="_blank">链接</a> <span class="label label-primary">模拟</span><p>1到16的最小公倍数是720720，是小于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding="application/x-tex">10^6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span>的，于是每个位置都可以填720720</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>i</mi><mo>+</mo><mi>j</mi><mi mathvariant="normal">−</mi><mn>1</mn><mo stretchy="false">)</mo><mi>m</mi><mi>o</mi><mi>d</mi><mn>2</mn><mo>=</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">(i+j−1)mod2==0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>的位置填720720，下一个位置是x就减去<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">x^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span>就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">char</span> c; <span class="hljs-keyword">int</span> num, f = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(c = getchar(),!<span class="hljs-built_in">isdigit</span>(c)) <span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>; num = c - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">while</span>(c = getchar(), <span class="hljs-built_in">isdigit</span>(c)) num = num * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">return</span> f * num;<br>&#125;<br><span class="hljs-keyword">int</span> n, m, a[<span class="hljs-number">509</span>][<span class="hljs-number">509</span>];<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    n = read(); m = read();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>            a[i][j] = read();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;<br>            <span class="hljs-keyword">if</span>((i + j - <span class="hljs-number">1</span>) &amp; <span class="hljs-number">1</span>) <br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;720720 &quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, <span class="hljs-number">720720</span> - a[i][j] * a[i][j] * a[i][j] * a[i][j]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces Round 700 (Div. 2)</title>
    <link href="/2021/02/08/cf-700/"/>
    <url>/2021/02/08/cf-700/</url>
    
    <content type="html"><![CDATA[<h2 id="a-yet-another-string-game"><a class="markdownIt-Anchor" href="#a-yet-another-string-game"></a> A. Yet Another String Game</h2><a class="btn" href="https://codeforces.com/contest/1480/problem/A"  title="https://codeforces.com/contest/1480/problem/A" target="_blank">链接</a> <span class="label label-primary">模拟</span><p>要求字典序最大，所以必须从最高位依次修改</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> t;<span class="hljs-built_in">cin</span>&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        <span class="hljs-built_in">string</span> s;<span class="hljs-built_in">cin</span>&gt;&gt;s;<br>        <span class="hljs-keyword">int</span> len=s.length();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>            <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;a&#x27;</span>)s[i]=<span class="hljs-string">&#x27;b&#x27;</span>;<br>                <span class="hljs-keyword">else</span> s[i]=<span class="hljs-string">&#x27;a&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;z&#x27;</span>)s[i]=<span class="hljs-string">&#x27;y&#x27;</span>;<br>                <span class="hljs-keyword">else</span> s[i]=<span class="hljs-string">&#x27;z&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="b-the-great-hero"><a class="markdownIt-Anchor" href="#b-the-great-hero"></a> B. The Great Hero</h2><a class="btn" href="https://codeforces.com/contest/1480/problem/B"  title="https://codeforces.com/contest/1480/problem/B" target="_blank">链接</a> <span class="label label-primary">模拟</span><p>由于最后一次攻击后，即使英雄死了也成功，只需要把最大攻击的放到最后判断最后一次攻击前英雄是否存活即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br>ll a[<span class="hljs-number">100005</span>],b[<span class="hljs-number">100005</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> t;<span class="hljs-built_in">cin</span>&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>ll A,B,n;<span class="hljs-built_in">cin</span>&gt;&gt;A&gt;&gt;B&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">cin</span>&gt;&gt;b[i];<br><span class="hljs-keyword">int</span> pos=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//找出攻击最大的把它交换到最后</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            <span class="hljs-keyword">if</span>(a[i]&gt;a[pos])pos=i;<br>        &#125;<br>        swap(a[n],a[pos]);<br>        swap(b[n],b[pos]);<br><span class="hljs-keyword">int</span> flag=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>ll ci=b[i]/A;<br><span class="hljs-keyword">if</span>(b[i]%A!=<span class="hljs-number">0</span>)ci++;<br>B-=(ci*a[i]);<br><span class="hljs-keyword">if</span>(B&lt;=<span class="hljs-number">0</span>&amp;&amp;i!=n)&#123;<br>flag=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(B&lt;=<span class="hljs-number">0</span>)&#123;<br>B+=a[n];<br><span class="hljs-keyword">if</span>(B&lt;=<span class="hljs-number">0</span>)flag=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(flag)<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="c-searching-local-minimum"><a class="markdownIt-Anchor" href="#c-searching-local-minimum"></a> C. Searching Local Minimum</h2><a class="btn" href="https://codeforces.com/contest/1480/problem/C"  title="https://codeforces.com/contest/1480/problem/C" target="_blank">链接</a> <span class="label label-primary">二分</span><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mi>r</mi><mo>=</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">l=1,r=n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span></p><p>二分维护 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo>&gt;</mo><msub><mi>a</mi><mi>l</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(a_i&gt;a_l)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>&amp;&amp;<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>a</mi><mi>r</mi></msub><mo>&lt;</mo><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(a_r&lt;a_i+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p><p>维护到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mo>=</mo><mo>=</mo><mi>r</mi></mrow><annotation encoding="application/x-tex">l==r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>时满足该点同时比左右两边小</p><p>取区间中点mid</p><p>若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo stretchy="false">]</mo><mo>&lt;</mo><mi>a</mi><mo stretchy="false">[</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[mid]&lt;a[mid+1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>l</mi><mo separator="true">,</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[l,mid]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mclose">]</span></span></span></span>满足上述性质</p><p>若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo stretchy="false">]</mo><mo>&gt;</mo><mi>a</mi><mo stretchy="false">[</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[mid]&gt;a[mid+1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>r</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[mid+1,r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span>满足上述性质</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">log_2(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>求解</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n,a[<span class="hljs-number">100005</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br><span class="hljs-keyword">if</span>(x&gt;n||x&lt;<span class="hljs-number">1</span>||a[x])<span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;? &quot;</span>&lt;&lt;x&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    fflush(<span class="hljs-built_in">stdout</span>);<br>    <span class="hljs-built_in">cin</span>&gt;&gt;a[x]; <br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    a[<span class="hljs-number">0</span>]=a[n+<span class="hljs-number">1</span>]=<span class="hljs-number">1e9</span>;<br>    get(<span class="hljs-number">1</span>); get(n);<br> <span class="hljs-keyword">int</span> l=<span class="hljs-number">1</span>,r=n;<br>    <span class="hljs-keyword">while</span>(r&gt;l)&#123;<br>        <span class="hljs-keyword">int</span> mid=(l+r)/<span class="hljs-number">2</span>;<br>        get(mid);<br>        get(mid+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(a[mid]&gt;a[mid+<span class="hljs-number">1</span>])l=mid+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> r=mid;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;! %d\n&quot;</span>,r);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="d-painting-the-array-i"><a class="markdownIt-Anchor" href="#d-painting-the-array-i"></a> D. Painting the Array I</h2><a class="btn" href="https://codeforces.com/contest/1480/problem/D1"  title="https://codeforces.com/contest/1480/problem/D1" target="_blank">链接</a> <span class="label label-primary">贪心</span><p>把数组a分成两个不相交的子数组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">a^0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mn>1</mn></msup></mrow><annotation encoding="application/x-tex">a^1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></p><p>要求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>e</mi><mi>g</mi><mo stretchy="false">(</mo><msup><mi>a</mi><mn>0</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">seg(a^0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>e</mi><mi>g</mi><mo stretchy="false">(</mo><msup><mi>a</mi><mn>1</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">seg(a^1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>最大</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>e</mi><mi>g</mi><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">seg(a)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mclose">)</span></span></span></span>表示数组a中不同的连续段</p><p>比如[1,1,2,2,3,4,3]不同连续段为[1,2,3,4,3], <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>e</mi><mi>g</mi></mrow><annotation encoding="application/x-tex">seg</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span>=5</p><p>设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">a^0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span>最后一个字母为x,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mn>1</mn></msup></mrow><annotation encoding="application/x-tex">a^1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span>最后一个字母为y,分类讨论</p><p>wa6的一般是讨论最后一种情况时出错了</p><ol><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mo>=</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x==y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 给<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">a^0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span>或<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mn>1</mn></msup></mrow><annotation encoding="application/x-tex">a^1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span>都可</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo stretchy="false">!</mo><mo>=</mo><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x!=a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> &amp;&amp; <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>=</mo><mo>=</mo><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">y==a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 把<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>放在x后更优</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo stretchy="false">!</mo><mo>=</mo><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">y!=a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> &amp;&amp; <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mo>=</mo><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x==a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和2同理</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo stretchy="false">!</mo><mo>=</mo><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x!=a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> &amp;&amp; <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo stretchy="false">!</mo><mo>=</mo><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">y!=a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> &amp;&amp; <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo stretchy="false">!</mo><mo>=</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x!=y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><br />定义<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>x</mi><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">nxt_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为数字i出现最近的位置</li></ol><p>如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>x</mi><msub><mi>t</mi><mi>x</mi></msub><mo>&lt;</mo><mi>n</mi><mi>x</mi><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">nxt_x&lt;nxt_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 放在x后面更优</p><p>如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>x</mi><msub><mi>t</mi><mi>x</mi></msub><mo>&gt;</mo><mi>n</mi><mi>x</mi><msub><mi>t</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">nxt_x&gt;nxt_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9011879999999999em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 放在y后面更优</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> n,a[maxn],id[maxn];<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;vec[maxn];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123; <br><span class="hljs-built_in">cin</span>&gt;&gt;a[i]; <br>vec[a[i]].push_back(i); <br>&#125;<br><span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>,one=<span class="hljs-number">-1</span>,two=<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>id[a[i]]++;<br><span class="hljs-keyword">if</span>(one==two)&#123;<br><span class="hljs-keyword">if</span>(one!=a[i])one=a[i],ans++;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(one!=a[i]&amp;&amp;two==a[i])one=a[i],ans++;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(two!=a[i]&amp;&amp;one==a[i])two=a[i],ans++;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(one==<span class="hljs-number">-1</span>)two=a[i],ans++;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(two==<span class="hljs-number">-1</span>)one=a[i],ans++;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">int</span> nxt_one=n+<span class="hljs-number">1</span>, nxt_two=n+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(id[one]&lt;vec[one].size())nxt_one=vec[one][id[one]];<br><span class="hljs-keyword">if</span>(id[two]&lt;vec[two].size())nxt_two=vec[two][id[two]];<br><span class="hljs-keyword">if</span>(nxt_one&gt;nxt_two)two=a[i],ans++;<br><span class="hljs-keyword">else</span> one=a[i],ans++;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;ans;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小区</title>
    <link href="/2021/01/26/20210126dinghaixiaoqu/"/>
    <url>/2021/01/26/20210126dinghaixiaoqu/</url>
    
    <content type="html"><![CDATA[<h3 id="时间"><a class="markdownIt-Anchor" href="#时间"></a> 时间</h3><p><strong>2021.01.26</strong></p><h3 id="地点"><a class="markdownIt-Anchor" href="#地点"></a> 地点</h3><p><strong>小区</strong></p><a id="more"></a><p>归家之心突然尤为急切。</p><p>1月23日考完离散数学，提前了半个多小时交卷，掰了掰时间，好像来不及回家了。</p><p>于是订了24很早的票，趁太阳还趴在地平线下，拎起行李箱就离开了寝室楼。</p><p>在一楼登记离校的时候，意外地在表格上看到之前的同学的离校日期清一色的12.24，于是一边向宿管阿姨确认时间，一边又感慨——平安夜真好。</p><p>是五个小时的颠簸。</p><p>当在车上听到熟悉的舟山话，在窗外闻到熟悉的只属于家乡的鱼腥味，不经意地瞟向窗外，是一帧帧流动的风景，是一座又一座数得上名字的大桥，脑海中清晰而又明澈的记忆仿佛逐渐被唤醒。</p><p>我终于回到舟山了，从疫情返校到暑期留校集训再到今天，也算整整两个学期了。</p><p>杭州虽好，可不接地气，我走到过学校每一个餐厅的每一个窗口，点过学校边的每一个外卖，越是如此，越是厌倦了想要迎合五湖四海口味的伙食。</p><p>可惜，当我终于拥有了一次充足的睡眠，睁眼却发现下起了淅淅沥沥的小雨，</p><p>我想起初中时喜欢不穿着雨衣骑着自行车狂奔，然后溅的背后一身泥水，</p><p>想起高中时不喜欢打伞，却天天盯着天气预报，只为了盼着能在雨天把伞递给喜欢的女孩子，</p><p>过了这些年纪，开始觉得雨天不好了，</p><p>讨厌下雨天的篮球课变成室外体能课，30个俯卧撑和深蹲轮流做好几组</p><p>讨厌下雨天的早八，浑浑噩噩走出寝室发现自己没有带伞</p><p>讨厌下雨天走进图书馆，出来时却发现伞不见了踪影</p><p>当我终于拿起相机走到户外，突如其来的雨又打破了我的节奏，</p><p>于是我将相机藏在怀里，走在屋檐下，在楼下逛了二十分钟，一边擦着满脸的雨水，一边拍摄下这些照片。</p><center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC04937_compressed.jpg" width="50%" height="50%" /></center><center>外婆家的旧小区改造</center>&nbsp<center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC04938_compressed.jpg" width="50%" height="50%" /></center>&nbsp<center><img src=https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC04944_compressed.jpg" width="50%" height="50%" /></center>&nbsp<center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC04947_compressed.jpg" width="50%" height="50%" /></center><center>饿了么骑手</center>&nbsp<center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC04960_compressed.jpg" width="50%" height="50%" /></center>&nbsp<center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC04967_compressed.jpg" width="50%" height="50%" /></center><center>当我躲在屋檐下时陪我的扫帚</center>&nbsp<center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC04968_compressed.jpg" width="50%" height="50%" /></center>&nbsp<center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC04975_compressed.jpg" width="50%" height="50%" /></center>&nbsp<center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC04979_compressed.jpg" width="50%" height="50%" /></center>&nbsp<center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC04983_compressed.jpg" width="50%" height="50%" /></center><center>百废待兴</center>&nbsp<center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC04991_compressed.jpg" width="50%" height="50%" /></center>&nbsp<center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC04995_compressed.jpg" width="50%" height="50%" /></center>&nbsp<center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC05034_compressed.jpg" width="50%" height="50%" /></center>&nbsp<center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC05036_compressed.jpg" width="50%" height="50%" /></center>&nbsp<center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC05049_compressed.jpg" width="50%" height="50%" /></center><center>躲在屋檐下发现的不同的视角</center>&nbsp<center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC05019_compressed.jpg" width="50%" height="50%" /></center><center>享受生活</center>]]></content>
    
    
    <categories>
      
      <category>摄影</category>
      
    </categories>
    
    
    <tags>
      
      <tag>photo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>九溪烟树游记</title>
    <link href="/2021/01/23/20201107jiuxiyanshu/"/>
    <url>/2021/01/23/20201107jiuxiyanshu/</url>
    
    <content type="html"><![CDATA[<h3 id="时间"><a class="markdownIt-Anchor" href="#时间"></a> 时间</h3><p><strong>2020.11.07</strong></p><h3 id="地点"><a class="markdownIt-Anchor" href="#地点"></a> 地点</h3><p><strong>杭州九溪烟树</strong></p><a id="more"></a><p>11月了杭州已经入秋，一直觉得去过九溪才算是真正逛完了西湖，可惜不太凑巧，枫叶还没有完全变黄</p><p>一路骑自行车上了半山腰，然后不知不觉才发现骑出了服务区，幸好下山的时候碰到了其他停在服务区外的共享单车</p><center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC04430.jpg" width="50%" height="50%" /></center><center>山腰湖水的倒影</center>&nbsp<center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC04443.jpg" width="50%" height="50%" /></center>&nbsp<div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC04442.jpg" alt="" /></div><div class="group-image-wrap"><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC04460.jpg" alt="" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC04436.jpg" alt="" /></div></div></div><center>这个点有很多家长带孩子出来玩</center>&nbsp<center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC04550.jpg" width="50%" height="50%" /></center>&nbsp<center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC04524-3.jpg" width="50%" height="50%" /></center>&nbsp<center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC04497.jpg" width="50%" height="50%" /></center>&nbsp<center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC04538.jpg" width="50%" height="50%" /></center>&nbsp<center><img src="https://yehosea-blog.oss-cn-hangzhou.aliyuncs.com/img/DSC04542.jpg" width="50%" height="50%" /></center>]]></content>
    
    
    <categories>
      
      <category>摄影</category>
      
    </categories>
    
    
    <tags>
      
      <tag>photo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Educational Codeforces Round 102 (Rated for Div. 2)ABCD</title>
    <link href="/2021/01/15/cf-edu102/"/>
    <url>/2021/01/15/cf-edu102/</url>
    
    <content type="html"><![CDATA[<h2 id="a-replacing-elements"><a class="markdownIt-Anchor" href="#a-replacing-elements"></a> A. Replacing Elements</h2><p>题意：可以使用任意次操作，使数组的其中两个元素的和代替另一个元素，问能否使所有元素都小于等于d</p><p>思路：<br />1.如果所有元素都小于等于d，无需操作即符合题意。<br />2.如果存在元素大于d，都可以用最小的两个元素的和去代替，只要最小两个元素的和小于等于d即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> a[<span class="hljs-number">105</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> t;<span class="hljs-built_in">cin</span>&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        <span class="hljs-keyword">int</span> n,d;<span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;d;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>        sort(a+<span class="hljs-number">1</span>,a+n+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(a[n]&lt;=d)&#123;<br>            <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(a[<span class="hljs-number">1</span>]+a[<span class="hljs-number">2</span>]&lt;=d)<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="b-string-lcm"><a class="markdownIt-Anchor" href="#b-string-lcm"></a> B. String LCM</h2><p>题意：定义字符串的因子，如baba的因子为ba和baba。<br />给你两个字符串，求lcm</p><p>思路：求出两个字符串长度的lcm，即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>e</mi><mi>n</mi><mo>=</mo><mi>l</mi><mi>c</mi><mi>m</mi><mo stretchy="false">(</mo><mi>l</mi><mi>e</mi><mi>n</mi><mn>1</mn><mo separator="true">,</mo><mi>l</mi><mi>e</mi><mi>n</mi><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">len=lcm(len1,len2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">c</span><span class="mord mathdefault">m</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord">2</span><span class="mclose">)</span></span></span></span>用其中一个字符串填满新的字符串，再检查另一个字符串是否为新字符串的因子。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;<br><span class="hljs-keyword">if</span>(x%y==<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> y;<br><span class="hljs-keyword">return</span> gcd(y,x%y);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> t;<span class="hljs-built_in">cin</span>&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        <span class="hljs-built_in">string</span> a,b,c;<span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b;<br>        <span class="hljs-keyword">int</span> len1=a.length(),len2=b.length();<br>        <span class="hljs-keyword">int</span> len=(len1*len2)/gcd(len1,len2);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=len/len1;i++)c+=a;<br>        <span class="hljs-keyword">int</span> flag=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i+=len2)&#123;<br>            <span class="hljs-built_in">string</span> d=c.substr(i,len2);<br>            <span class="hljs-keyword">if</span>(b!=d)&#123;<br>                flag=<span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag)<span class="hljs-built_in">cout</span>&lt;&lt;c&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">-1</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="c-no-more-inversions"><a class="markdownIt-Anchor" href="#c-no-more-inversions"></a> C. No More Inversions</h2><p>题意：数组a为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3...</mn><mi>k</mi><mi mathvariant="normal">−</mi><mn>1</mn><mo separator="true">,</mo><mi>k</mi><mo separator="true">,</mo><mi>k</mi><mi mathvariant="normal">−</mi><mn>1</mn><mo separator="true">,</mo><mi>k</mi><mi mathvariant="normal">−</mi><mn>2...</mn><mi>k</mi><mi mathvariant="normal">−</mi><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">−</mi><mi>k</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>k</mi><mtext>≤</mtext><mi>n</mi><mo>&lt;</mo><mn>2</mn><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">1,2,3...k−1,k,k−1,k−2...k−(n−k)(k\text{≤}n&lt;2k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">−</span><span class="mord">2</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">−</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord text"><span class="mord">≤</span></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span>.</p><p>求一个p排列，根据a数组和p数组，根据 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub><mo>=</mo><mi>p</mi><mo stretchy="false">[</mo><msub><mi>a</mi><mi>i</mi></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">b_i=p[a_i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span> 求出b数组，要求b数组的逆序对数量小于等于a数组的逆序对数量，且字典序最大。</p><p>思路：拿到这道题，先算了一下a数组的逆序对数量，可以发现a数组的逆序对主要来自于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo separator="true">,</mo><mi>k</mi><mi mathvariant="normal">−</mi><mn>1</mn><mo separator="true">,</mo><mi>k</mi><mi mathvariant="normal">−</mi><mn>2...</mn><mi>k</mi><mi mathvariant="normal">−</mi><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">−</mi><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">k,k−1,k−2...k−(n−k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">−</span><span class="mord">2</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">−</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span>，例如（12345432）的逆序对来源于（1234<span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder accentunder="true"><mn>5432</mn><mo stretchy="true">‾</mo></munder></mrow><annotation encoding="application/x-tex">\underline{5432}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.20000000000000007em;"></span><span class="mord underline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6444399999999999em;"><span style="top:-2.84em;"><span class="pstrut" style="height:3em;"></span><span class="underline-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span><span class="mord">4</span><span class="mord">3</span><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.20000000000000007em;"><span></span></span></span></span></span></span></span></span>）</p><p>然后考虑一下p数组对生成的b数组的影响，比如如果生成2345432的逆序对和生成5432345是一样的，但是字典序会最大，所以把这部分p数组逆序即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> t;<span class="hljs-built_in">cin</span>&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        <span class="hljs-keyword">int</span> n,k;<span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;k;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">2</span>*k-n;i++)&#123;<br>            <span class="hljs-built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=k;i&gt;=<span class="hljs-number">2</span>*k-n;i--)&#123;<br>            <span class="hljs-built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="d-program"><a class="markdownIt-Anchor" href="#d-program"></a> D. Program</h2><p>题意：给你一个初始为0的x，给你一系列操作，’+‘表示x+=1，’-'表示x-=1，然后给q次查询l和r，表示删除区间【l，r】内的所有操作，通过剩下的操作可以使x变成多少个不同的值。</p><p>思路：删除中间一部分区间，那么我们剩下了【1，l-1】和【r+1，n】的两端区间，先考虑能够使x变成多少个不同的正数，可以转化为x最大能变成多少，比如x最大如果能变成5，那么必然能变成1、2、3、4。</p><p>最大能变成的数=max（第一段最大能贡献的正数，第一段操作结束后x的值+第二段最大能贡献正数）</p><p>第一段最大能贡献的正数，我们使用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mi>q</mi><mi>i</mi><mi>a</mi><msub><mi>n</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">maxqian_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord mathdefault">i</span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>表示，表示1-i的过程中最大能到几，O(n)处理</p><p>第一段操作结束后x的值用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi><mi>i</mi><mi>a</mi><msub><mi>n</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">qian_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord mathdefault">i</span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>表示，前缀和O(n)处理</p><p>第二段最大能贡献正数，我们使用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mi>o</mi><msub><mi>u</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">hou_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>表示，从后往前处理，比如+±–，那么最大能贡献是2，最后的三个负号没用作用，因此<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mi>o</mi><msub><mi>u</mi><mi>i</mi></msub><mtext>≥</mtext><mn>0</mn></mrow><annotation encoding="application/x-tex">hou_i\text{≥}0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord text"><span class="mord">≥</span></span><span class="mord">0</span></span></span></span></p><p>然后把if语句中的±号换一下，就可以计算最小能变成的负数</p><p>正负相加再加0就是答案</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> m(a) memset(a,0,sizeof(a))</span><br><span class="hljs-keyword">int</span> qian[<span class="hljs-number">200005</span>];<br><span class="hljs-keyword">int</span> qian1[<span class="hljs-number">200005</span>];<br><span class="hljs-keyword">int</span> maxqian[<span class="hljs-number">200005</span>];<br><span class="hljs-keyword">int</span> minqian[<span class="hljs-number">200005</span>];<br><span class="hljs-keyword">int</span> hou[<span class="hljs-number">200005</span>];<br><span class="hljs-keyword">int</span> hou1[<span class="hljs-number">200005</span>];<br><span class="hljs-keyword">char</span> s[<span class="hljs-number">200005</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> t;<span class="hljs-built_in">cin</span>&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        <span class="hljs-keyword">int</span> n,m;<span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,s+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">int</span> len=<span class="hljs-built_in">strlen</span>(s+<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//正数部分</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=len;i++)&#123;<br>            <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;-&#x27;</span>)qian[i]=qian[i<span class="hljs-number">-1</span>]<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">else</span> qian[i]=qian[i<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>;<br>            maxqian[i]=max(maxqian[i<span class="hljs-number">-1</span>],qian[i]);<br>        &#125;<br>        hou[len+<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=len;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br>            <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;-&#x27;</span>)&#123;<br>                hou[i]=hou[i+<span class="hljs-number">1</span>]<span class="hljs-number">-1</span>;<br>                <span class="hljs-keyword">if</span>(hou[i]&lt;<span class="hljs-number">0</span>)hou[i]=<span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                hou[i]=hou[i+<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//负数部分</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=len;i++)&#123;<br>            <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;+&#x27;</span>)qian1[i]=qian1[i<span class="hljs-number">-1</span>]<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">else</span> qian1[i]=qian1[i<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>;<br>            minqian[i]=max(minqian[i<span class="hljs-number">-1</span>],qian1[i]);<br>        &#125;<br>        hou1[len+<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=len;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br>            <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;+&#x27;</span>)&#123;<br>                hou1[i]=hou1[i+<span class="hljs-number">1</span>]<span class="hljs-number">-1</span>;<br>                <span class="hljs-keyword">if</span>(hou1[i]&lt;<span class="hljs-number">0</span>)hou1[i]=<span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                hou1[i]=hou1[i+<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(m--)&#123;<br>            <span class="hljs-keyword">int</span> l,r;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;l,&amp;r);<br>            <span class="hljs-keyword">int</span> sum1=maxqian[l<span class="hljs-number">-1</span>];<br>            <span class="hljs-keyword">int</span> sum2=qian[l<span class="hljs-number">-1</span>]+hou[r+<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">int</span> sum3=minqian[l<span class="hljs-number">-1</span>];<br>            <span class="hljs-keyword">int</span> sum4=qian1[l<span class="hljs-number">-1</span>]+hou1[r+<span class="hljs-number">1</span>];<br>            <span class="hljs-built_in">cout</span>&lt;&lt;max(sum1,sum2)+max(sum3,sum4)+<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACM寒假训练</title>
    <link href="/2021/01/14/%E5%AF%92%E5%81%87%E8%AE%AD%E7%BB%83/"/>
    <url>/2021/01/14/%E5%AF%92%E5%81%87%E8%AE%AD%E7%BB%83/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="私人日记" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="474daa68a7b048ee0bfd6811ff750e41688a5b1c97214756165df027b7a7d857"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">名字缩写+手机解锁密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/10/20/hello-world/"/>
    <url>/2020/10/20/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
